
POST_LAB_4_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000048e  00000522  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000048e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800110  00800110  00000532  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000532  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000564  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000952  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000723  00000000  00000000  00000f36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000412  00000000  00000000  00001659  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040e  00000000  00000000  00001b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ba  00000000  00000000  00001f3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000021f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e8       	ldi	r30, 0x8E	; 142
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 31       	cpi	r26, 0x17	; 23
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a9 00 	call	0x152	; 0x152 <main>
  9e:	0c 94 45 02 	jmp	0x48a	; 0x48a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
    }
}

void setup(void) {
    // Configurar pines PB0 a PB2 como salidas para los transistores
    DDRB |= 0b00000111;
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	87 60       	ori	r24, 0x07	; 7
  aa:	84 b9       	out	0x04, r24	; 4

    // Configurar PC3 y PC0 como entradas con pull-up habilitado para los botones
    DDRC &= ~((1 << DDC3) | (1 << DDC0)); // Configurar como entrada
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	86 7f       	andi	r24, 0xF6	; 246
  b0:	87 b9       	out	0x07, r24	; 7
    PORTC |= ((1 << PORTC3) | (1 << PORTC0)); // Habilitar resistencias de pull-up en PC3 y PC0
  b2:	88 b1       	in	r24, 0x08	; 8
  b4:	89 60       	ori	r24, 0x09	; 9
  b6:	88 b9       	out	0x08, r24	; 8

    // Configurar pines PD0 a PD7 como salidas para los LEDs
    DDRD |= 0b11111111;
  b8:	8a b1       	in	r24, 0x0a	; 10
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	8a b9       	out	0x0a, r24	; 10
  be:	08 95       	ret

000000c0 <__vector_4>:
}

ISR(PCINT1_vect) {
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	8f e3       	ldi	r24, 0x3F	; 63
  d0:	9c e9       	ldi	r25, 0x9C	; 156
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <__vector_4+0x12>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <__vector_4+0x18>
  d8:	00 00       	nop
	_delay_ms(10);
    // Verificar si la interrupción fue causada por PCINT11 (PC3)
    if (PINC & (1 << PINC3)) {
  da:	33 9b       	sbis	0x06, 3	; 6
  dc:	05 c0       	rjmp	.+10     	; 0xe8 <__vector_4+0x28>
        contador++; // Incrementar contador si el botón en PC3 fue presionado
  de:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador>
  e2:	8f 5f       	subi	r24, 0xFF	; 255
  e4:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <contador>
    }
    // Verificar si la interrupción fue causada por PCINT8 (PC0)
    if (PINC & (1 << PINC0)) {
  e8:	30 9b       	sbis	0x06, 0	; 6
  ea:	05 c0       	rjmp	.+10     	; 0xf6 <__vector_4+0x36>
        contador--; // Decrementar contador si el botón en PC0 fue presionado
  ec:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador>
  f0:	81 50       	subi	r24, 0x01	; 1
  f2:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <contador>
	}
	contador = (contador > 255) ? 0 : contador;// Si contador Overflow 255 se resetea el contador
  f6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador>
  fa:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador>
  fe:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <contador>
	contador = (contador < 0) ? 255 : contador;// Si contador Underflow 0 se setea a 255
 102:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador>
 106:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador>
 10a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <contador>
}
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <initADC>:

void initADC(void){
	//reiniciamos
	ADMUX = 0;
 11c:	ec e7       	ldi	r30, 0x7C	; 124
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	10 82       	st	Z, r1
	// Seleccionamos ADC6
	ADMUX = 0b110;
 122:	86 e0       	ldi	r24, 0x06	; 6
 124:	80 83       	st	Z, r24
	//Referencia AVCC = 5V
	ADMUX |= (1<<REFS0);
 126:	80 81       	ld	r24, Z
 128:	80 64       	ori	r24, 0x40	; 64
 12a:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
 12c:	80 81       	ld	r24, Z
 12e:	8f 77       	andi	r24, 0x7F	; 127
 130:	80 83       	st	Z, r24
	//Justificacion a la izquierda
	ADMUX |= (1<<ADLAR);
 132:	80 81       	ld	r24, Z
 134:	80 62       	ori	r24, 0x20	; 32
 136:	80 83       	st	Z, r24
	
	ADCSRA =0;
 138:	ea e7       	ldi	r30, 0x7A	; 122
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	10 82       	st	Z, r1
	//Habilitamos la interrupcion del ADC
	ADCSRA |= (1<<ADIE);
 13e:	80 81       	ld	r24, Z
 140:	88 60       	ori	r24, 0x08	; 8
 142:	80 83       	st	Z, r24
	//Habilitamos prescaller de 16M/128 Fadc = 125kHz
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 144:	80 81       	ld	r24, Z
 146:	87 60       	ori	r24, 0x07	; 7
 148:	80 83       	st	Z, r24
	//Habilitando el ADC
	ADCSRA |= (1<<ADEN);
 14a:	80 81       	ld	r24, Z
 14c:	80 68       	ori	r24, 0x80	; 128
 14e:	80 83       	st	Z, r24
 150:	08 95       	ret

00000152 <main>:

//Tabla
const uint8_t mylist[] = {0x7E, 0x28, 0x5D, 0x6D, 0x2B, 0x67, 0x77, 0x2C, 0x7F, 0x2F, 0x3F, 0x73, 0x56, 0x79, 0x57, 0x17};

int main(void) {
	setup(); // Configurar Puertos
 152:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	
    cli(); // Deshabilitar Interrupciones
 156:	f8 94       	cli
	
	//INTERRUPCIONES
    // Habilitar interrupciones de pin change para los pines PC0 y PC3
	PCMSK1 |= ((1 << PCINT11) | (1 << PCINT8)); // Habilitar interrupciones para PCINT11 y PCINT8
 158:	ec e6       	ldi	r30, 0x6C	; 108
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	89 60       	ori	r24, 0x09	; 9
 160:	80 83       	st	Z, r24
    PCICR |= (1 << PCIE1); // PCINT1 8-14 Grupo 1
 162:	e8 e6       	ldi	r30, 0x68	; 104
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	82 60       	ori	r24, 0x02	; 2
 16a:	80 83       	st	Z, r24
	
	//ADC
	DDRD |=0xFF;
 16c:	8a b1       	in	r24, 0x0a	; 10
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;
 172:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0;
 174:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	initADC();
 178:	0e 94 8e 00 	call	0x11c	; 0x11c <initADC>
	
    sei(); // Habilitar Interrupciones Globales
 17c:	78 94       	sei
    while (1) {
        // Programa principal
		
		//Displays
		//D1
		PORTB |= (1 << PB1);// Encender transistor en PB1
 17e:	85 b1       	in	r24, 0x05	; 5
 180:	82 60       	ori	r24, 0x02	; 2
 182:	85 b9       	out	0x05, r24	; 5
		//ADC
		PORTD = mylist[PP1];// Cargar valor a puerto
 184:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <PP1>
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	e0 50       	subi	r30, 0x00	; 0
 18c:	ff 4f       	sbci	r31, 0xFF	; 255
 18e:	80 81       	ld	r24, Z
 190:	8b b9       	out	0x0b, r24	; 11
 192:	8f e9       	ldi	r24, 0x9F	; 159
 194:	9f e0       	ldi	r25, 0x0F	; 15
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <main+0x44>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x4a>
 19c:	00 00       	nop
		_delay_ms(1);
		PORTB &= ~(1 << PB1);// Apagar transistor en PB1
 19e:	85 b1       	in	r24, 0x05	; 5
 1a0:	8d 7f       	andi	r24, 0xFD	; 253
 1a2:	85 b9       	out	0x05, r24	; 5
 1a4:	8f e9       	ldi	r24, 0x9F	; 159
 1a6:	9f e0       	ldi	r25, 0x0F	; 15
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <main+0x56>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <main+0x5c>
 1ae:	00 00       	nop
		_delay_ms(1);
		//D2
		PORTB |= (1 << PB2);// Encender transistor en PB2
 1b0:	85 b1       	in	r24, 0x05	; 5
 1b2:	84 60       	ori	r24, 0x04	; 4
 1b4:	85 b9       	out	0x05, r24	; 5
		PORTD = mylist[PP2];// Cargar valor a puerto
 1b6:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	e0 50       	subi	r30, 0x00	; 0
 1be:	ff 4f       	sbci	r31, 0xFF	; 255
 1c0:	80 81       	ld	r24, Z
 1c2:	8b b9       	out	0x0b, r24	; 11
 1c4:	8f e9       	ldi	r24, 0x9F	; 159
 1c6:	9f e0       	ldi	r25, 0x0F	; 15
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <main+0x76>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <main+0x7c>
 1ce:	00 00       	nop
		_delay_ms(1);
		PORTB &= ~(1 << PB2);// Apagar transistor en PB2
 1d0:	85 b1       	in	r24, 0x05	; 5
 1d2:	8b 7f       	andi	r24, 0xFB	; 251
 1d4:	85 b9       	out	0x05, r24	; 5
 1d6:	8f e9       	ldi	r24, 0x9F	; 159
 1d8:	9f e0       	ldi	r25, 0x0F	; 15
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <main+0x88>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <main+0x8e>
 1e0:	00 00       	nop
		_delay_ms(1);
		
		//Leds
		PORTB |= (1 << PB0);// Encender transistor en PB0
 1e2:	85 b1       	in	r24, 0x05	; 5
 1e4:	81 60       	ori	r24, 0x01	; 1
 1e6:	85 b9       	out	0x05, r24	; 5
		PORTD = 0;// Limpiamos salida de leds
 1e8:	1b b8       	out	0x0b, r1	; 11
		PORTD = contador;// Mostrar valor de contador
 1ea:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador>
 1ee:	8b b9       	out	0x0b, r24	; 11
 1f0:	8f e9       	ldi	r24, 0x9F	; 159
 1f2:	9f e0       	ldi	r25, 0x0F	; 15
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <main+0xa2>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <main+0xa8>
 1fa:	00 00       	nop
		_delay_ms(1);
		PORTB &= ~(1 << PB0);// Apagar transistor en PB0
 1fc:	85 b1       	in	r24, 0x05	; 5
 1fe:	8e 7f       	andi	r24, 0xFE	; 254
 200:	85 b9       	out	0x05, r24	; 5
 202:	8f e9       	ldi	r24, 0x9F	; 159
 204:	9f e0       	ldi	r25, 0x0F	; 15
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <main+0xb4>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <main+0xba>
 20c:	00 00       	nop
 20e:	b7 cf       	rjmp	.-146    	; 0x17e <main+0x2c>

00000210 <__vector_21>:
	//Habilitando el ADC
	ADCSRA |= (1<<ADEN);

}

ISR(ADC_vect){
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	2f 93       	push	r18
 21c:	3f 93       	push	r19
 21e:	4f 93       	push	r20
 220:	5f 93       	push	r21
 222:	6f 93       	push	r22
 224:	7f 93       	push	r23
 226:	8f 93       	push	r24
 228:	9f 93       	push	r25
 22a:	af 93       	push	r26
 22c:	bf 93       	push	r27
 22e:	ef 93       	push	r30
 230:	ff 93       	push	r31
	counter = 0.2493*ADCH;
 232:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 236:	70 e0       	ldi	r23, 0x00	; 0
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 4c 01 	call	0x298	; 0x298 <__floatsisf>
 240:	20 e8       	ldi	r18, 0x80	; 128
 242:	38 e4       	ldi	r19, 0x48	; 72
 244:	4f e7       	ldi	r20, 0x7F	; 127
 246:	5e e3       	ldi	r21, 0x3E	; 62
 248:	0e 94 87 01 	call	0x30e	; 0x30e <__mulsf3>
 24c:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <counter>
 250:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <counter+0x1>
 254:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <counter+0x2>
 258:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <counter+0x3>
	
	PP1 = 15;
 25c:	8f e0       	ldi	r24, 0x0F	; 15
 25e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <PP1>
	PP2 = 7;
 262:	87 e0       	ldi	r24, 0x07	; 7
 264:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	
	ADCSRA |= (1<<ADIF);
 268:	ea e7       	ldi	r30, 0x7A	; 122
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	80 61       	ori	r24, 0x10	; 16
 270:	80 83       	st	Z, r24
}
 272:	ff 91       	pop	r31
 274:	ef 91       	pop	r30
 276:	bf 91       	pop	r27
 278:	af 91       	pop	r26
 27a:	9f 91       	pop	r25
 27c:	8f 91       	pop	r24
 27e:	7f 91       	pop	r23
 280:	6f 91       	pop	r22
 282:	5f 91       	pop	r21
 284:	4f 91       	pop	r20
 286:	3f 91       	pop	r19
 288:	2f 91       	pop	r18
 28a:	0f 90       	pop	r0
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	0f 90       	pop	r0
 290:	1f 90       	pop	r1
 292:	18 95       	reti

00000294 <__floatunsisf>:
 294:	e8 94       	clt
 296:	09 c0       	rjmp	.+18     	; 0x2aa <__floatsisf+0x12>

00000298 <__floatsisf>:
 298:	97 fb       	bst	r25, 7
 29a:	3e f4       	brtc	.+14     	; 0x2aa <__floatsisf+0x12>
 29c:	90 95       	com	r25
 29e:	80 95       	com	r24
 2a0:	70 95       	com	r23
 2a2:	61 95       	neg	r22
 2a4:	7f 4f       	sbci	r23, 0xFF	; 255
 2a6:	8f 4f       	sbci	r24, 0xFF	; 255
 2a8:	9f 4f       	sbci	r25, 0xFF	; 255
 2aa:	99 23       	and	r25, r25
 2ac:	a9 f0       	breq	.+42     	; 0x2d8 <__floatsisf+0x40>
 2ae:	f9 2f       	mov	r31, r25
 2b0:	96 e9       	ldi	r25, 0x96	; 150
 2b2:	bb 27       	eor	r27, r27
 2b4:	93 95       	inc	r25
 2b6:	f6 95       	lsr	r31
 2b8:	87 95       	ror	r24
 2ba:	77 95       	ror	r23
 2bc:	67 95       	ror	r22
 2be:	b7 95       	ror	r27
 2c0:	f1 11       	cpse	r31, r1
 2c2:	f8 cf       	rjmp	.-16     	; 0x2b4 <__floatsisf+0x1c>
 2c4:	fa f4       	brpl	.+62     	; 0x304 <__floatsisf+0x6c>
 2c6:	bb 0f       	add	r27, r27
 2c8:	11 f4       	brne	.+4      	; 0x2ce <__floatsisf+0x36>
 2ca:	60 ff       	sbrs	r22, 0
 2cc:	1b c0       	rjmp	.+54     	; 0x304 <__floatsisf+0x6c>
 2ce:	6f 5f       	subi	r22, 0xFF	; 255
 2d0:	7f 4f       	sbci	r23, 0xFF	; 255
 2d2:	8f 4f       	sbci	r24, 0xFF	; 255
 2d4:	9f 4f       	sbci	r25, 0xFF	; 255
 2d6:	16 c0       	rjmp	.+44     	; 0x304 <__floatsisf+0x6c>
 2d8:	88 23       	and	r24, r24
 2da:	11 f0       	breq	.+4      	; 0x2e0 <__floatsisf+0x48>
 2dc:	96 e9       	ldi	r25, 0x96	; 150
 2de:	11 c0       	rjmp	.+34     	; 0x302 <__floatsisf+0x6a>
 2e0:	77 23       	and	r23, r23
 2e2:	21 f0       	breq	.+8      	; 0x2ec <__floatsisf+0x54>
 2e4:	9e e8       	ldi	r25, 0x8E	; 142
 2e6:	87 2f       	mov	r24, r23
 2e8:	76 2f       	mov	r23, r22
 2ea:	05 c0       	rjmp	.+10     	; 0x2f6 <__floatsisf+0x5e>
 2ec:	66 23       	and	r22, r22
 2ee:	71 f0       	breq	.+28     	; 0x30c <__floatsisf+0x74>
 2f0:	96 e8       	ldi	r25, 0x86	; 134
 2f2:	86 2f       	mov	r24, r22
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	2a f0       	brmi	.+10     	; 0x304 <__floatsisf+0x6c>
 2fa:	9a 95       	dec	r25
 2fc:	66 0f       	add	r22, r22
 2fe:	77 1f       	adc	r23, r23
 300:	88 1f       	adc	r24, r24
 302:	da f7       	brpl	.-10     	; 0x2fa <__floatsisf+0x62>
 304:	88 0f       	add	r24, r24
 306:	96 95       	lsr	r25
 308:	87 95       	ror	r24
 30a:	97 f9       	bld	r25, 7
 30c:	08 95       	ret

0000030e <__mulsf3>:
 30e:	0e 94 9a 01 	call	0x334	; 0x334 <__mulsf3x>
 312:	0c 94 0b 02 	jmp	0x416	; 0x416 <__fp_round>
 316:	0e 94 fd 01 	call	0x3fa	; 0x3fa <__fp_pscA>
 31a:	38 f0       	brcs	.+14     	; 0x32a <__mulsf3+0x1c>
 31c:	0e 94 04 02 	call	0x408	; 0x408 <__fp_pscB>
 320:	20 f0       	brcs	.+8      	; 0x32a <__mulsf3+0x1c>
 322:	95 23       	and	r25, r21
 324:	11 f0       	breq	.+4      	; 0x32a <__mulsf3+0x1c>
 326:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__fp_inf>
 32a:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__fp_nan>
 32e:	11 24       	eor	r1, r1
 330:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__fp_szero>

00000334 <__mulsf3x>:
 334:	0e 94 1c 02 	call	0x438	; 0x438 <__fp_split3>
 338:	70 f3       	brcs	.-36     	; 0x316 <__mulsf3+0x8>

0000033a <__mulsf3_pse>:
 33a:	95 9f       	mul	r25, r21
 33c:	c1 f3       	breq	.-16     	; 0x32e <__mulsf3+0x20>
 33e:	95 0f       	add	r25, r21
 340:	50 e0       	ldi	r21, 0x00	; 0
 342:	55 1f       	adc	r21, r21
 344:	62 9f       	mul	r22, r18
 346:	f0 01       	movw	r30, r0
 348:	72 9f       	mul	r23, r18
 34a:	bb 27       	eor	r27, r27
 34c:	f0 0d       	add	r31, r0
 34e:	b1 1d       	adc	r27, r1
 350:	63 9f       	mul	r22, r19
 352:	aa 27       	eor	r26, r26
 354:	f0 0d       	add	r31, r0
 356:	b1 1d       	adc	r27, r1
 358:	aa 1f       	adc	r26, r26
 35a:	64 9f       	mul	r22, r20
 35c:	66 27       	eor	r22, r22
 35e:	b0 0d       	add	r27, r0
 360:	a1 1d       	adc	r26, r1
 362:	66 1f       	adc	r22, r22
 364:	82 9f       	mul	r24, r18
 366:	22 27       	eor	r18, r18
 368:	b0 0d       	add	r27, r0
 36a:	a1 1d       	adc	r26, r1
 36c:	62 1f       	adc	r22, r18
 36e:	73 9f       	mul	r23, r19
 370:	b0 0d       	add	r27, r0
 372:	a1 1d       	adc	r26, r1
 374:	62 1f       	adc	r22, r18
 376:	83 9f       	mul	r24, r19
 378:	a0 0d       	add	r26, r0
 37a:	61 1d       	adc	r22, r1
 37c:	22 1f       	adc	r18, r18
 37e:	74 9f       	mul	r23, r20
 380:	33 27       	eor	r19, r19
 382:	a0 0d       	add	r26, r0
 384:	61 1d       	adc	r22, r1
 386:	23 1f       	adc	r18, r19
 388:	84 9f       	mul	r24, r20
 38a:	60 0d       	add	r22, r0
 38c:	21 1d       	adc	r18, r1
 38e:	82 2f       	mov	r24, r18
 390:	76 2f       	mov	r23, r22
 392:	6a 2f       	mov	r22, r26
 394:	11 24       	eor	r1, r1
 396:	9f 57       	subi	r25, 0x7F	; 127
 398:	50 40       	sbci	r21, 0x00	; 0
 39a:	9a f0       	brmi	.+38     	; 0x3c2 <__mulsf3_pse+0x88>
 39c:	f1 f0       	breq	.+60     	; 0x3da <__mulsf3_pse+0xa0>
 39e:	88 23       	and	r24, r24
 3a0:	4a f0       	brmi	.+18     	; 0x3b4 <__mulsf3_pse+0x7a>
 3a2:	ee 0f       	add	r30, r30
 3a4:	ff 1f       	adc	r31, r31
 3a6:	bb 1f       	adc	r27, r27
 3a8:	66 1f       	adc	r22, r22
 3aa:	77 1f       	adc	r23, r23
 3ac:	88 1f       	adc	r24, r24
 3ae:	91 50       	subi	r25, 0x01	; 1
 3b0:	50 40       	sbci	r21, 0x00	; 0
 3b2:	a9 f7       	brne	.-22     	; 0x39e <__mulsf3_pse+0x64>
 3b4:	9e 3f       	cpi	r25, 0xFE	; 254
 3b6:	51 05       	cpc	r21, r1
 3b8:	80 f0       	brcs	.+32     	; 0x3da <__mulsf3_pse+0xa0>
 3ba:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__fp_inf>
 3be:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__fp_szero>
 3c2:	5f 3f       	cpi	r21, 0xFF	; 255
 3c4:	e4 f3       	brlt	.-8      	; 0x3be <__mulsf3_pse+0x84>
 3c6:	98 3e       	cpi	r25, 0xE8	; 232
 3c8:	d4 f3       	brlt	.-12     	; 0x3be <__mulsf3_pse+0x84>
 3ca:	86 95       	lsr	r24
 3cc:	77 95       	ror	r23
 3ce:	67 95       	ror	r22
 3d0:	b7 95       	ror	r27
 3d2:	f7 95       	ror	r31
 3d4:	e7 95       	ror	r30
 3d6:	9f 5f       	subi	r25, 0xFF	; 255
 3d8:	c1 f7       	brne	.-16     	; 0x3ca <__mulsf3_pse+0x90>
 3da:	fe 2b       	or	r31, r30
 3dc:	88 0f       	add	r24, r24
 3de:	91 1d       	adc	r25, r1
 3e0:	96 95       	lsr	r25
 3e2:	87 95       	ror	r24
 3e4:	97 f9       	bld	r25, 7
 3e6:	08 95       	ret

000003e8 <__fp_inf>:
 3e8:	97 f9       	bld	r25, 7
 3ea:	9f 67       	ori	r25, 0x7F	; 127
 3ec:	80 e8       	ldi	r24, 0x80	; 128
 3ee:	70 e0       	ldi	r23, 0x00	; 0
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	08 95       	ret

000003f4 <__fp_nan>:
 3f4:	9f ef       	ldi	r25, 0xFF	; 255
 3f6:	80 ec       	ldi	r24, 0xC0	; 192
 3f8:	08 95       	ret

000003fa <__fp_pscA>:
 3fa:	00 24       	eor	r0, r0
 3fc:	0a 94       	dec	r0
 3fe:	16 16       	cp	r1, r22
 400:	17 06       	cpc	r1, r23
 402:	18 06       	cpc	r1, r24
 404:	09 06       	cpc	r0, r25
 406:	08 95       	ret

00000408 <__fp_pscB>:
 408:	00 24       	eor	r0, r0
 40a:	0a 94       	dec	r0
 40c:	12 16       	cp	r1, r18
 40e:	13 06       	cpc	r1, r19
 410:	14 06       	cpc	r1, r20
 412:	05 06       	cpc	r0, r21
 414:	08 95       	ret

00000416 <__fp_round>:
 416:	09 2e       	mov	r0, r25
 418:	03 94       	inc	r0
 41a:	00 0c       	add	r0, r0
 41c:	11 f4       	brne	.+4      	; 0x422 <__fp_round+0xc>
 41e:	88 23       	and	r24, r24
 420:	52 f0       	brmi	.+20     	; 0x436 <__fp_round+0x20>
 422:	bb 0f       	add	r27, r27
 424:	40 f4       	brcc	.+16     	; 0x436 <__fp_round+0x20>
 426:	bf 2b       	or	r27, r31
 428:	11 f4       	brne	.+4      	; 0x42e <__fp_round+0x18>
 42a:	60 ff       	sbrs	r22, 0
 42c:	04 c0       	rjmp	.+8      	; 0x436 <__fp_round+0x20>
 42e:	6f 5f       	subi	r22, 0xFF	; 255
 430:	7f 4f       	sbci	r23, 0xFF	; 255
 432:	8f 4f       	sbci	r24, 0xFF	; 255
 434:	9f 4f       	sbci	r25, 0xFF	; 255
 436:	08 95       	ret

00000438 <__fp_split3>:
 438:	57 fd       	sbrc	r21, 7
 43a:	90 58       	subi	r25, 0x80	; 128
 43c:	44 0f       	add	r20, r20
 43e:	55 1f       	adc	r21, r21
 440:	59 f0       	breq	.+22     	; 0x458 <__fp_splitA+0x10>
 442:	5f 3f       	cpi	r21, 0xFF	; 255
 444:	71 f0       	breq	.+28     	; 0x462 <__fp_splitA+0x1a>
 446:	47 95       	ror	r20

00000448 <__fp_splitA>:
 448:	88 0f       	add	r24, r24
 44a:	97 fb       	bst	r25, 7
 44c:	99 1f       	adc	r25, r25
 44e:	61 f0       	breq	.+24     	; 0x468 <__fp_splitA+0x20>
 450:	9f 3f       	cpi	r25, 0xFF	; 255
 452:	79 f0       	breq	.+30     	; 0x472 <__fp_splitA+0x2a>
 454:	87 95       	ror	r24
 456:	08 95       	ret
 458:	12 16       	cp	r1, r18
 45a:	13 06       	cpc	r1, r19
 45c:	14 06       	cpc	r1, r20
 45e:	55 1f       	adc	r21, r21
 460:	f2 cf       	rjmp	.-28     	; 0x446 <__fp_split3+0xe>
 462:	46 95       	lsr	r20
 464:	f1 df       	rcall	.-30     	; 0x448 <__fp_splitA>
 466:	08 c0       	rjmp	.+16     	; 0x478 <__fp_splitA+0x30>
 468:	16 16       	cp	r1, r22
 46a:	17 06       	cpc	r1, r23
 46c:	18 06       	cpc	r1, r24
 46e:	99 1f       	adc	r25, r25
 470:	f1 cf       	rjmp	.-30     	; 0x454 <__fp_splitA+0xc>
 472:	86 95       	lsr	r24
 474:	71 05       	cpc	r23, r1
 476:	61 05       	cpc	r22, r1
 478:	08 94       	sec
 47a:	08 95       	ret

0000047c <__fp_zero>:
 47c:	e8 94       	clt

0000047e <__fp_szero>:
 47e:	bb 27       	eor	r27, r27
 480:	66 27       	eor	r22, r22
 482:	77 27       	eor	r23, r23
 484:	cb 01       	movw	r24, r22
 486:	97 f9       	bld	r25, 7
 488:	08 95       	ret

0000048a <_exit>:
 48a:	f8 94       	cli

0000048c <__stop_program>:
 48c:	ff cf       	rjmp	.-2      	; 0x48c <__stop_program>
