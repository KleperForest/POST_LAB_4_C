
POST_LAB_4_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000482  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  000004f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000528  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000953  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000725  00000000  00000000  00000efb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f0  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001a10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040e  00000000  00000000  00001ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ba  00000000  00000000  00001ede  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002198  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e8       	ldi	r30, 0x82	; 130
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 30       	cpi	r26, 0x07	; 7
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a9 00 	call	0x152	; 0x152 <main>
  9e:	0c 94 3f 02 	jmp	0x47e	; 0x47e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
    }
}

void setup(void) {
    // Configurar pines PB0 a PB2 como salidas para los transistores
    DDRB |= 0b00000111;
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	87 60       	ori	r24, 0x07	; 7
  aa:	84 b9       	out	0x04, r24	; 4

    // Configurar PC3 y PC0 como entradas con pull-up habilitado para los botones
    DDRC &= ~((1 << DDC3) | (1 << DDC0)); // Configurar como entrada
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	86 7f       	andi	r24, 0xF6	; 246
  b0:	87 b9       	out	0x07, r24	; 7
    PORTC |= ((1 << PORTC3) | (1 << PORTC0)); // Habilitar resistencias de pull-up en PC3 y PC0
  b2:	88 b1       	in	r24, 0x08	; 8
  b4:	89 60       	ori	r24, 0x09	; 9
  b6:	88 b9       	out	0x08, r24	; 8

    // Configurar pines PD0 a PD7 como salidas para los LEDs
    DDRD |= 0b11111111;
  b8:	8a b1       	in	r24, 0x0a	; 10
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	8a b9       	out	0x0a, r24	; 10
  be:	08 95       	ret

000000c0 <__vector_4>:
}

ISR(PCINT1_vect) {
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	8f e3       	ldi	r24, 0x3F	; 63
  d0:	9c e9       	ldi	r25, 0x9C	; 156
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <__vector_4+0x12>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <__vector_4+0x18>
  d8:	00 00       	nop
	_delay_ms(10);
    // Verificar si la interrupción fue causada por PCINT11 (PC3)
    if (PINC & (1 << PINC3)) {
  da:	33 9b       	sbis	0x06, 3	; 6
  dc:	05 c0       	rjmp	.+10     	; 0xe8 <__vector_4+0x28>
        contador++; // Incrementar contador si el botón en PC3 fue presionado
  de:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <contador>
  e2:	8f 5f       	subi	r24, 0xFF	; 255
  e4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <contador>
    }
    // Verificar si la interrupción fue causada por PCINT8 (PC0)
    if (PINC & (1 << PINC0)) {
  e8:	30 9b       	sbis	0x06, 0	; 6
  ea:	05 c0       	rjmp	.+10     	; 0xf6 <__vector_4+0x36>
        contador--; // Decrementar contador si el botón en PC0 fue presionado
  ec:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <contador>
  f0:	81 50       	subi	r24, 0x01	; 1
  f2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <contador>
	}
	contador = (contador > 255) ? 0 : contador;// Si contador Overflow 255 se resetea el contador
  f6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <contador>
  fa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <contador>
  fe:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <contador>
	contador = (contador < 0) ? 255 : contador;// Si contador Underflow 0 se setea a 255
 102:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <contador>
 106:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <contador>
 10a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <contador>
}
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <initADC>:

void initADC(void){
	//reiniciamos
	ADMUX = 0;
 11c:	ec e7       	ldi	r30, 0x7C	; 124
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	10 82       	st	Z, r1
	// Seleccionamos ADC6
	ADMUX = 0b110;
 122:	86 e0       	ldi	r24, 0x06	; 6
 124:	80 83       	st	Z, r24
	//Referencia AVCC = 5V
	ADMUX |= (1<<REFS0);
 126:	80 81       	ld	r24, Z
 128:	80 64       	ori	r24, 0x40	; 64
 12a:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
 12c:	80 81       	ld	r24, Z
 12e:	8f 77       	andi	r24, 0x7F	; 127
 130:	80 83       	st	Z, r24
	//Justificacion a la izquierda
	ADMUX |= (1<<ADLAR);
 132:	80 81       	ld	r24, Z
 134:	80 62       	ori	r24, 0x20	; 32
 136:	80 83       	st	Z, r24
	
	ADCSRA =0;
 138:	ea e7       	ldi	r30, 0x7A	; 122
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	10 82       	st	Z, r1
	//Habilitamos la interrupcion del ADC
	ADCSRA |= (1<<ADIE);
 13e:	80 81       	ld	r24, Z
 140:	88 60       	ori	r24, 0x08	; 8
 142:	80 83       	st	Z, r24
	//Habilitamos prescaller de 16M/128 Fadc = 125kHz
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 144:	80 81       	ld	r24, Z
 146:	87 60       	ori	r24, 0x07	; 7
 148:	80 83       	st	Z, r24
	//Habilitando el ADC
	ADCSRA |= (1<<ADEN);
 14a:	80 81       	ld	r24, Z
 14c:	80 68       	ori	r24, 0x80	; 128
 14e:	80 83       	st	Z, r24
 150:	08 95       	ret

00000152 <main>:

//Tabla
const uint8_t mylist[] = {0x7E, 0x28, 0x5D, 0x6D, 0x2B, 0x67, 0x77, 0x2C, 0x7F, 0x2F, 0x3F, 0x73, 0x56, 0x79, 0x57, 0x17};

int main(void) {
	setup(); // Configurar Puertos
 152:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	
    cli(); // Deshabilitar Interrupciones
 156:	f8 94       	cli
	
	//INTERRUPCIONES
    // Habilitar interrupciones de pin change para los pines PC0 y PC3
	PCMSK1 |= ((1 << PCINT11) | (1 << PCINT8)); // Habilitar interrupciones para PCINT11 y PCINT8
 158:	ec e6       	ldi	r30, 0x6C	; 108
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	89 60       	ori	r24, 0x09	; 9
 160:	80 83       	st	Z, r24
    PCICR |= (1 << PCIE1); // PCINT1 8-14 Grupo 1
 162:	e8 e6       	ldi	r30, 0x68	; 104
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	82 60       	ori	r24, 0x02	; 2
 16a:	80 83       	st	Z, r24
	
	//ADC
	DDRD |=0xFF;
 16c:	8a b1       	in	r24, 0x0a	; 10
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;
 172:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0;
 174:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	initADC();
 178:	0e 94 8e 00 	call	0x11c	; 0x11c <initADC>
	
    sei(); // Habilitar Interrupciones Globales
 17c:	78 94       	sei

    while (1) {
        // Programa principal
		ADCSRA |= (1<<ADSC);
 17e:	ea e7       	ldi	r30, 0x7A	; 122
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	80 64       	ori	r24, 0x40	; 64
 186:	80 83       	st	Z, r24
		
		
		//Leds
		PORTB |= (1 << PB0);// Encender transistor en PB0
 188:	85 b1       	in	r24, 0x05	; 5
 18a:	81 60       	ori	r24, 0x01	; 1
 18c:	85 b9       	out	0x05, r24	; 5
		PORTD = 0;// Limpiamos salida de leds
 18e:	1b b8       	out	0x0b, r1	; 11
		PORTD = contador;// Mostrar valor de contador
 190:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <contador>
 194:	8b b9       	out	0x0b, r24	; 11
 196:	8f e9       	ldi	r24, 0x9F	; 159
 198:	9f e0       	ldi	r25, 0x0F	; 15
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <main+0x48>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <main+0x4e>
 1a0:	00 00       	nop
		_delay_ms(1);
		PORTB &= ~(1 << PB0);// Apagar transistor en PB0
 1a2:	85 b1       	in	r24, 0x05	; 5
 1a4:	8e 7f       	andi	r24, 0xFE	; 254
 1a6:	85 b9       	out	0x05, r24	; 5
 1a8:	8f e9       	ldi	r24, 0x9F	; 159
 1aa:	9f e0       	ldi	r25, 0x0F	; 15
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <main+0x5a>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0x60>
 1b2:	00 00       	nop
 1b4:	e4 cf       	rjmp	.-56     	; 0x17e <main+0x2c>

000001b6 <__vector_21>:
	//Habilitando el ADC
	ADCSRA |= (1<<ADEN);

}

ISR(ADC_vect){
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	2f 93       	push	r18
 1c2:	3f 93       	push	r19
 1c4:	4f 93       	push	r20
 1c6:	5f 93       	push	r21
 1c8:	6f 93       	push	r22
 1ca:	7f 93       	push	r23
 1cc:	8f 93       	push	r24
 1ce:	9f 93       	push	r25
 1d0:	af 93       	push	r26
 1d2:	bf 93       	push	r27
 1d4:	ef 93       	push	r30
 1d6:	ff 93       	push	r31
	counter = 0.2493*ADCH;
 1d8:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 46 01 	call	0x28c	; 0x28c <__floatsisf>
 1e6:	20 e8       	ldi	r18, 0x80	; 128
 1e8:	38 e4       	ldi	r19, 0x48	; 72
 1ea:	4f e7       	ldi	r20, 0x7F	; 127
 1ec:	5e e3       	ldi	r21, 0x3E	; 62
 1ee:	0e 94 81 01 	call	0x302	; 0x302 <__mulsf3>
 1f2:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <counter>
 1f6:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <counter+0x1>
 1fa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <counter+0x2>
 1fe:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <counter+0x3>
	
	PP1 = 15;
 202:	8f e0       	ldi	r24, 0x0F	; 15
 204:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <PP1>
	PP2 = 7;
 208:	87 e0       	ldi	r24, 0x07	; 7
 20a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	//Displays
	//D1
	PORTB |= (1 << PB1);// Encender transistor en PB1
 20e:	85 b1       	in	r24, 0x05	; 5
 210:	82 60       	ori	r24, 0x02	; 2
 212:	85 b9       	out	0x05, r24	; 5
	//ADC
	PORTD = mylist[0];// Cargar valor a puerto
 214:	9e e7       	ldi	r25, 0x7E	; 126
 216:	9b b9       	out	0x0b, r25	; 11
 218:	ef e9       	ldi	r30, 0x9F	; 159
 21a:	ff e0       	ldi	r31, 0x0F	; 15
 21c:	31 97       	sbiw	r30, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <__vector_21+0x66>
 220:	00 c0       	rjmp	.+0      	; 0x222 <__vector_21+0x6c>
 222:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1 << PB1);// Apagar transistor en PB1
 224:	85 b1       	in	r24, 0x05	; 5
 226:	8d 7f       	andi	r24, 0xFD	; 253
 228:	85 b9       	out	0x05, r24	; 5
 22a:	ef e9       	ldi	r30, 0x9F	; 159
 22c:	ff e0       	ldi	r31, 0x0F	; 15
 22e:	31 97       	sbiw	r30, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <__vector_21+0x78>
 232:	00 c0       	rjmp	.+0      	; 0x234 <__vector_21+0x7e>
 234:	00 00       	nop
	_delay_ms(1);
	//D2
	PORTB |= (1 << PB2);// Encender transistor en PB2
 236:	85 b1       	in	r24, 0x05	; 5
 238:	84 60       	ori	r24, 0x04	; 4
 23a:	85 b9       	out	0x05, r24	; 5
	PORTD = mylist[0];// Cargar valor a puerto
 23c:	9b b9       	out	0x0b, r25	; 11
 23e:	8f e9       	ldi	r24, 0x9F	; 159
 240:	9f e0       	ldi	r25, 0x0F	; 15
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <__vector_21+0x8c>
 246:	00 c0       	rjmp	.+0      	; 0x248 <__vector_21+0x92>
 248:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1 << PB2);// Apagar transistor en PB2
 24a:	85 b1       	in	r24, 0x05	; 5
 24c:	8b 7f       	andi	r24, 0xFB	; 251
 24e:	85 b9       	out	0x05, r24	; 5
 250:	ef e9       	ldi	r30, 0x9F	; 159
 252:	ff e0       	ldi	r31, 0x0F	; 15
 254:	31 97       	sbiw	r30, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <__vector_21+0x9e>
 258:	00 c0       	rjmp	.+0      	; 0x25a <__vector_21+0xa4>
 25a:	00 00       	nop
	_delay_ms(1);
	
	ADCSRA |= (1<<ADIF);
 25c:	ea e7       	ldi	r30, 0x7A	; 122
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	80 61       	ori	r24, 0x10	; 16
 264:	80 83       	st	Z, r24
}
 266:	ff 91       	pop	r31
 268:	ef 91       	pop	r30
 26a:	bf 91       	pop	r27
 26c:	af 91       	pop	r26
 26e:	9f 91       	pop	r25
 270:	8f 91       	pop	r24
 272:	7f 91       	pop	r23
 274:	6f 91       	pop	r22
 276:	5f 91       	pop	r21
 278:	4f 91       	pop	r20
 27a:	3f 91       	pop	r19
 27c:	2f 91       	pop	r18
 27e:	0f 90       	pop	r0
 280:	0f be       	out	0x3f, r0	; 63
 282:	0f 90       	pop	r0
 284:	1f 90       	pop	r1
 286:	18 95       	reti

00000288 <__floatunsisf>:
 288:	e8 94       	clt
 28a:	09 c0       	rjmp	.+18     	; 0x29e <__floatsisf+0x12>

0000028c <__floatsisf>:
 28c:	97 fb       	bst	r25, 7
 28e:	3e f4       	brtc	.+14     	; 0x29e <__floatsisf+0x12>
 290:	90 95       	com	r25
 292:	80 95       	com	r24
 294:	70 95       	com	r23
 296:	61 95       	neg	r22
 298:	7f 4f       	sbci	r23, 0xFF	; 255
 29a:	8f 4f       	sbci	r24, 0xFF	; 255
 29c:	9f 4f       	sbci	r25, 0xFF	; 255
 29e:	99 23       	and	r25, r25
 2a0:	a9 f0       	breq	.+42     	; 0x2cc <__floatsisf+0x40>
 2a2:	f9 2f       	mov	r31, r25
 2a4:	96 e9       	ldi	r25, 0x96	; 150
 2a6:	bb 27       	eor	r27, r27
 2a8:	93 95       	inc	r25
 2aa:	f6 95       	lsr	r31
 2ac:	87 95       	ror	r24
 2ae:	77 95       	ror	r23
 2b0:	67 95       	ror	r22
 2b2:	b7 95       	ror	r27
 2b4:	f1 11       	cpse	r31, r1
 2b6:	f8 cf       	rjmp	.-16     	; 0x2a8 <__floatsisf+0x1c>
 2b8:	fa f4       	brpl	.+62     	; 0x2f8 <__floatsisf+0x6c>
 2ba:	bb 0f       	add	r27, r27
 2bc:	11 f4       	brne	.+4      	; 0x2c2 <__floatsisf+0x36>
 2be:	60 ff       	sbrs	r22, 0
 2c0:	1b c0       	rjmp	.+54     	; 0x2f8 <__floatsisf+0x6c>
 2c2:	6f 5f       	subi	r22, 0xFF	; 255
 2c4:	7f 4f       	sbci	r23, 0xFF	; 255
 2c6:	8f 4f       	sbci	r24, 0xFF	; 255
 2c8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ca:	16 c0       	rjmp	.+44     	; 0x2f8 <__floatsisf+0x6c>
 2cc:	88 23       	and	r24, r24
 2ce:	11 f0       	breq	.+4      	; 0x2d4 <__floatsisf+0x48>
 2d0:	96 e9       	ldi	r25, 0x96	; 150
 2d2:	11 c0       	rjmp	.+34     	; 0x2f6 <__floatsisf+0x6a>
 2d4:	77 23       	and	r23, r23
 2d6:	21 f0       	breq	.+8      	; 0x2e0 <__floatsisf+0x54>
 2d8:	9e e8       	ldi	r25, 0x8E	; 142
 2da:	87 2f       	mov	r24, r23
 2dc:	76 2f       	mov	r23, r22
 2de:	05 c0       	rjmp	.+10     	; 0x2ea <__floatsisf+0x5e>
 2e0:	66 23       	and	r22, r22
 2e2:	71 f0       	breq	.+28     	; 0x300 <__floatsisf+0x74>
 2e4:	96 e8       	ldi	r25, 0x86	; 134
 2e6:	86 2f       	mov	r24, r22
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	2a f0       	brmi	.+10     	; 0x2f8 <__floatsisf+0x6c>
 2ee:	9a 95       	dec	r25
 2f0:	66 0f       	add	r22, r22
 2f2:	77 1f       	adc	r23, r23
 2f4:	88 1f       	adc	r24, r24
 2f6:	da f7       	brpl	.-10     	; 0x2ee <__floatsisf+0x62>
 2f8:	88 0f       	add	r24, r24
 2fa:	96 95       	lsr	r25
 2fc:	87 95       	ror	r24
 2fe:	97 f9       	bld	r25, 7
 300:	08 95       	ret

00000302 <__mulsf3>:
 302:	0e 94 94 01 	call	0x328	; 0x328 <__mulsf3x>
 306:	0c 94 05 02 	jmp	0x40a	; 0x40a <__fp_round>
 30a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <__fp_pscA>
 30e:	38 f0       	brcs	.+14     	; 0x31e <__mulsf3+0x1c>
 310:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__fp_pscB>
 314:	20 f0       	brcs	.+8      	; 0x31e <__mulsf3+0x1c>
 316:	95 23       	and	r25, r21
 318:	11 f0       	breq	.+4      	; 0x31e <__mulsf3+0x1c>
 31a:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__fp_inf>
 31e:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__fp_nan>
 322:	11 24       	eor	r1, r1
 324:	0c 94 39 02 	jmp	0x472	; 0x472 <__fp_szero>

00000328 <__mulsf3x>:
 328:	0e 94 16 02 	call	0x42c	; 0x42c <__fp_split3>
 32c:	70 f3       	brcs	.-36     	; 0x30a <__mulsf3+0x8>

0000032e <__mulsf3_pse>:
 32e:	95 9f       	mul	r25, r21
 330:	c1 f3       	breq	.-16     	; 0x322 <__mulsf3+0x20>
 332:	95 0f       	add	r25, r21
 334:	50 e0       	ldi	r21, 0x00	; 0
 336:	55 1f       	adc	r21, r21
 338:	62 9f       	mul	r22, r18
 33a:	f0 01       	movw	r30, r0
 33c:	72 9f       	mul	r23, r18
 33e:	bb 27       	eor	r27, r27
 340:	f0 0d       	add	r31, r0
 342:	b1 1d       	adc	r27, r1
 344:	63 9f       	mul	r22, r19
 346:	aa 27       	eor	r26, r26
 348:	f0 0d       	add	r31, r0
 34a:	b1 1d       	adc	r27, r1
 34c:	aa 1f       	adc	r26, r26
 34e:	64 9f       	mul	r22, r20
 350:	66 27       	eor	r22, r22
 352:	b0 0d       	add	r27, r0
 354:	a1 1d       	adc	r26, r1
 356:	66 1f       	adc	r22, r22
 358:	82 9f       	mul	r24, r18
 35a:	22 27       	eor	r18, r18
 35c:	b0 0d       	add	r27, r0
 35e:	a1 1d       	adc	r26, r1
 360:	62 1f       	adc	r22, r18
 362:	73 9f       	mul	r23, r19
 364:	b0 0d       	add	r27, r0
 366:	a1 1d       	adc	r26, r1
 368:	62 1f       	adc	r22, r18
 36a:	83 9f       	mul	r24, r19
 36c:	a0 0d       	add	r26, r0
 36e:	61 1d       	adc	r22, r1
 370:	22 1f       	adc	r18, r18
 372:	74 9f       	mul	r23, r20
 374:	33 27       	eor	r19, r19
 376:	a0 0d       	add	r26, r0
 378:	61 1d       	adc	r22, r1
 37a:	23 1f       	adc	r18, r19
 37c:	84 9f       	mul	r24, r20
 37e:	60 0d       	add	r22, r0
 380:	21 1d       	adc	r18, r1
 382:	82 2f       	mov	r24, r18
 384:	76 2f       	mov	r23, r22
 386:	6a 2f       	mov	r22, r26
 388:	11 24       	eor	r1, r1
 38a:	9f 57       	subi	r25, 0x7F	; 127
 38c:	50 40       	sbci	r21, 0x00	; 0
 38e:	9a f0       	brmi	.+38     	; 0x3b6 <__mulsf3_pse+0x88>
 390:	f1 f0       	breq	.+60     	; 0x3ce <__mulsf3_pse+0xa0>
 392:	88 23       	and	r24, r24
 394:	4a f0       	brmi	.+18     	; 0x3a8 <__mulsf3_pse+0x7a>
 396:	ee 0f       	add	r30, r30
 398:	ff 1f       	adc	r31, r31
 39a:	bb 1f       	adc	r27, r27
 39c:	66 1f       	adc	r22, r22
 39e:	77 1f       	adc	r23, r23
 3a0:	88 1f       	adc	r24, r24
 3a2:	91 50       	subi	r25, 0x01	; 1
 3a4:	50 40       	sbci	r21, 0x00	; 0
 3a6:	a9 f7       	brne	.-22     	; 0x392 <__mulsf3_pse+0x64>
 3a8:	9e 3f       	cpi	r25, 0xFE	; 254
 3aa:	51 05       	cpc	r21, r1
 3ac:	80 f0       	brcs	.+32     	; 0x3ce <__mulsf3_pse+0xa0>
 3ae:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__fp_inf>
 3b2:	0c 94 39 02 	jmp	0x472	; 0x472 <__fp_szero>
 3b6:	5f 3f       	cpi	r21, 0xFF	; 255
 3b8:	e4 f3       	brlt	.-8      	; 0x3b2 <__mulsf3_pse+0x84>
 3ba:	98 3e       	cpi	r25, 0xE8	; 232
 3bc:	d4 f3       	brlt	.-12     	; 0x3b2 <__mulsf3_pse+0x84>
 3be:	86 95       	lsr	r24
 3c0:	77 95       	ror	r23
 3c2:	67 95       	ror	r22
 3c4:	b7 95       	ror	r27
 3c6:	f7 95       	ror	r31
 3c8:	e7 95       	ror	r30
 3ca:	9f 5f       	subi	r25, 0xFF	; 255
 3cc:	c1 f7       	brne	.-16     	; 0x3be <__mulsf3_pse+0x90>
 3ce:	fe 2b       	or	r31, r30
 3d0:	88 0f       	add	r24, r24
 3d2:	91 1d       	adc	r25, r1
 3d4:	96 95       	lsr	r25
 3d6:	87 95       	ror	r24
 3d8:	97 f9       	bld	r25, 7
 3da:	08 95       	ret

000003dc <__fp_inf>:
 3dc:	97 f9       	bld	r25, 7
 3de:	9f 67       	ori	r25, 0x7F	; 127
 3e0:	80 e8       	ldi	r24, 0x80	; 128
 3e2:	70 e0       	ldi	r23, 0x00	; 0
 3e4:	60 e0       	ldi	r22, 0x00	; 0
 3e6:	08 95       	ret

000003e8 <__fp_nan>:
 3e8:	9f ef       	ldi	r25, 0xFF	; 255
 3ea:	80 ec       	ldi	r24, 0xC0	; 192
 3ec:	08 95       	ret

000003ee <__fp_pscA>:
 3ee:	00 24       	eor	r0, r0
 3f0:	0a 94       	dec	r0
 3f2:	16 16       	cp	r1, r22
 3f4:	17 06       	cpc	r1, r23
 3f6:	18 06       	cpc	r1, r24
 3f8:	09 06       	cpc	r0, r25
 3fa:	08 95       	ret

000003fc <__fp_pscB>:
 3fc:	00 24       	eor	r0, r0
 3fe:	0a 94       	dec	r0
 400:	12 16       	cp	r1, r18
 402:	13 06       	cpc	r1, r19
 404:	14 06       	cpc	r1, r20
 406:	05 06       	cpc	r0, r21
 408:	08 95       	ret

0000040a <__fp_round>:
 40a:	09 2e       	mov	r0, r25
 40c:	03 94       	inc	r0
 40e:	00 0c       	add	r0, r0
 410:	11 f4       	brne	.+4      	; 0x416 <__fp_round+0xc>
 412:	88 23       	and	r24, r24
 414:	52 f0       	brmi	.+20     	; 0x42a <__fp_round+0x20>
 416:	bb 0f       	add	r27, r27
 418:	40 f4       	brcc	.+16     	; 0x42a <__fp_round+0x20>
 41a:	bf 2b       	or	r27, r31
 41c:	11 f4       	brne	.+4      	; 0x422 <__fp_round+0x18>
 41e:	60 ff       	sbrs	r22, 0
 420:	04 c0       	rjmp	.+8      	; 0x42a <__fp_round+0x20>
 422:	6f 5f       	subi	r22, 0xFF	; 255
 424:	7f 4f       	sbci	r23, 0xFF	; 255
 426:	8f 4f       	sbci	r24, 0xFF	; 255
 428:	9f 4f       	sbci	r25, 0xFF	; 255
 42a:	08 95       	ret

0000042c <__fp_split3>:
 42c:	57 fd       	sbrc	r21, 7
 42e:	90 58       	subi	r25, 0x80	; 128
 430:	44 0f       	add	r20, r20
 432:	55 1f       	adc	r21, r21
 434:	59 f0       	breq	.+22     	; 0x44c <__fp_splitA+0x10>
 436:	5f 3f       	cpi	r21, 0xFF	; 255
 438:	71 f0       	breq	.+28     	; 0x456 <__fp_splitA+0x1a>
 43a:	47 95       	ror	r20

0000043c <__fp_splitA>:
 43c:	88 0f       	add	r24, r24
 43e:	97 fb       	bst	r25, 7
 440:	99 1f       	adc	r25, r25
 442:	61 f0       	breq	.+24     	; 0x45c <__fp_splitA+0x20>
 444:	9f 3f       	cpi	r25, 0xFF	; 255
 446:	79 f0       	breq	.+30     	; 0x466 <__fp_splitA+0x2a>
 448:	87 95       	ror	r24
 44a:	08 95       	ret
 44c:	12 16       	cp	r1, r18
 44e:	13 06       	cpc	r1, r19
 450:	14 06       	cpc	r1, r20
 452:	55 1f       	adc	r21, r21
 454:	f2 cf       	rjmp	.-28     	; 0x43a <__fp_split3+0xe>
 456:	46 95       	lsr	r20
 458:	f1 df       	rcall	.-30     	; 0x43c <__fp_splitA>
 45a:	08 c0       	rjmp	.+16     	; 0x46c <__fp_splitA+0x30>
 45c:	16 16       	cp	r1, r22
 45e:	17 06       	cpc	r1, r23
 460:	18 06       	cpc	r1, r24
 462:	99 1f       	adc	r25, r25
 464:	f1 cf       	rjmp	.-30     	; 0x448 <__fp_splitA+0xc>
 466:	86 95       	lsr	r24
 468:	71 05       	cpc	r23, r1
 46a:	61 05       	cpc	r22, r1
 46c:	08 94       	sec
 46e:	08 95       	ret

00000470 <__fp_zero>:
 470:	e8 94       	clt

00000472 <__fp_szero>:
 472:	bb 27       	eor	r27, r27
 474:	66 27       	eor	r22, r22
 476:	77 27       	eor	r23, r23
 478:	cb 01       	movw	r24, r22
 47a:	97 f9       	bld	r25, 7
 47c:	08 95       	ret

0000047e <_exit>:
 47e:	f8 94       	cli

00000480 <__stop_program>:
 480:	ff cf       	rjmp	.-2      	; 0x480 <__stop_program>
