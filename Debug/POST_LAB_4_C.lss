
POST_LAB_4_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000152  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a0  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d0  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f9  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000013bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f5  00000000  00000000  0000142c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000056  00000000  00000000  00001821  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001877  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e5       	ldi	r30, 0x52	; 82
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  9e:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:

}

void setup(void){
	// Configurar pines PB0 a PB1 como salidas para los LEDs
	DDRB |= 0b00000011;
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	83 60       	ori	r24, 0x03	; 3
  aa:	84 b9       	out	0x04, r24	; 4
  ac:	08 95       	ret

000000ae <initADC>:
}

void initADC(void){
	ADMUX = 0b0110;// Lectura en ADC6
  ae:	ec e7       	ldi	r30, 0x7C	; 124
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	86 e0       	ldi	r24, 0x06	; 6
  b4:	80 83       	st	Z, r24
	// referencia AVCC = 5V
	ADMUX |= (1<<REFS0);
  b6:	80 81       	ld	r24, Z
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  bc:	80 81       	ld	r24, Z
  be:	8f 77       	andi	r24, 0x7F	; 127
  c0:	80 83       	st	Z, r24
	//Justificacion a al izquierda
	ADMUX |= (1<<ADLAR);
  c2:	80 81       	ld	r24, Z
  c4:	80 62       	ori	r24, 0x20	; 32
  c6:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	10 82       	st	Z, r1
	// Habilitamos la interrupcion del ADC
	ADCSRA |= (1<<ADIE);
  ce:	80 81       	ld	r24, Z
  d0:	88 60       	ori	r24, 0x08	; 8
  d2:	80 83       	st	Z, r24
	// Habilitamos prescaler de 16M/128 Fadc = 125kHz
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
  d4:	80 81       	ld	r24, Z
  d6:	87 60       	ori	r24, 0x07	; 7
  d8:	80 83       	st	Z, r24
	// Habilitando el ADC
	ADCSRA |= (1<<ADEN);	
  da:	80 81       	ld	r24, Z
  dc:	80 68       	ori	r24, 0x80	; 128
  de:	80 83       	st	Z, r24
  e0:	08 95       	ret

000000e2 <main>:
//Tabla en hexadecimal

uint8_t contador = 0; // Inicializar contador a 0

int main(void) {
	setup();
  e2:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	
	cli();
  e6:	f8 94       	cli
	
	DDRD |= 0xFF;
  e8:	8a b1       	in	r24, 0x0a	; 10
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;
  ee:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0;
  f0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	initADC();
  f4:	0e 94 57 00 	call	0xae	; 0xae <initADC>
	
	sei();
  f8:	78 94       	sei
	
	// Bucle principal
	while (1) {
		PORTB |= (1 << PB1);// encender transistor
  fa:	85 b1       	in	r24, 0x05	; 5
  fc:	82 60       	ori	r24, 0x02	; 2
  fe:	85 b9       	out	0x05, r24	; 5
		ADCSRA |= (1<<ADSC);
 100:	ea e7       	ldi	r30, 0x7A	; 122
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	80 64       	ori	r24, 0x40	; 64
 108:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	83 ec       	ldi	r24, 0xC3	; 195
 10e:	99 e0       	ldi	r25, 0x09	; 9
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x2e>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x38>
 11a:	00 00       	nop
 11c:	ee cf       	rjmp	.-36     	; 0xfa <main+0x18>

0000011e <__vector_21>:
	// Habilitando el ADC
	ADCSRA |= (1<<ADEN);	
	
}

ISR(ADC_vect){
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	8f 93       	push	r24
 12a:	ef 93       	push	r30
 12c:	ff 93       	push	r31
	{
		contador = 0;
	}*/
	
	
	PORTD = ADCH; //mylist[contador];// Cargar valor a puerto
 12e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 132:	8b b9       	out	0x0b, r24	; 11
	ADCSRA |= (1<<ADIF);
 134:	ea e7       	ldi	r30, 0x7A	; 122
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	80 61       	ori	r24, 0x10	; 16
 13c:	80 83       	st	Z, r24
	
 13e:	ff 91       	pop	r31
 140:	ef 91       	pop	r30
 142:	8f 91       	pop	r24
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
