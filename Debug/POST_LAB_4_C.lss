
POST_LAB_4_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000003c2  00000456  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800110  00800110  00000466  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000466  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000498  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000098c  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000725  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000414  00000000  00000000  000015c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  000019e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040e  00000000  00000000  00001aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000300  00000000  00000000  00001eae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000021ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ec       	ldi	r30, 0xC2	; 194
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 31       	cpi	r26, 0x17	; 23
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a9 00 	call	0x152	; 0x152 <main>
  9e:	0c 94 df 01 	jmp	0x3be	; 0x3be <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
    }
}

void setup(void) {
    // Configurar pines PB0 a PB2 como salidas para los transistores
    DDRB |= 0b00000111;
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	87 60       	ori	r24, 0x07	; 7
  aa:	84 b9       	out	0x04, r24	; 4

    // Configurar PC3 y PC0 como entradas con pull-up habilitado para los botones
    DDRC &= ~((1 << DDC3) | (1 << DDC0)); // Configurar como entrada
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	86 7f       	andi	r24, 0xF6	; 246
  b0:	87 b9       	out	0x07, r24	; 7
    PORTC |= ((1 << PORTC3) | (1 << PORTC0)); // Habilitar resistencias de pull-up en PC3 y PC0
  b2:	88 b1       	in	r24, 0x08	; 8
  b4:	89 60       	ori	r24, 0x09	; 9
  b6:	88 b9       	out	0x08, r24	; 8

    // Configurar pines PD0 a PD7 como salidas para los LEDs
    DDRD |= 0b11111111;
  b8:	8a b1       	in	r24, 0x0a	; 10
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	8a b9       	out	0x0a, r24	; 10
  be:	08 95       	ret

000000c0 <__vector_4>:
}

ISR(PCINT1_vect) {
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	8f e3       	ldi	r24, 0x3F	; 63
  d0:	9c e9       	ldi	r25, 0x9C	; 156
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <__vector_4+0x12>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <__vector_4+0x18>
  d8:	00 00       	nop
	_delay_ms(10);
    // Verificar si la interrupción fue causada por PCINT11 (PC3)
    if (PINC & (1 << PINC3)) {
  da:	33 9b       	sbis	0x06, 3	; 6
  dc:	05 c0       	rjmp	.+10     	; 0xe8 <__vector_4+0x28>
        contador++; // Incrementar contador si el botón en PC3 fue presionado
  de:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador>
  e2:	8f 5f       	subi	r24, 0xFF	; 255
  e4:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <contador>
    }
    // Verificar si la interrupción fue causada por PCINT8 (PC0)
    if (PINC & (1 << PINC0)) {
  e8:	30 9b       	sbis	0x06, 0	; 6
  ea:	05 c0       	rjmp	.+10     	; 0xf6 <__vector_4+0x36>
        contador--; // Decrementar contador si el botón en PC0 fue presionado
  ec:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador>
  f0:	81 50       	subi	r24, 0x01	; 1
  f2:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <contador>
	}
	contador = (contador > 255) ? 0 : contador;// Si contador Overflow 255 se resetea el contador
  f6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador>
  fa:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador>
  fe:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <contador>
	contador = (contador < 0) ? 255 : contador;// Si contador Underflow 0 se setea a 255
 102:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador>
 106:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador>
 10a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <contador>
}
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <initADC>:

void initADC(void){
	//reiniciamos
	ADMUX = 0;
 11c:	ec e7       	ldi	r30, 0x7C	; 124
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	10 82       	st	Z, r1
	// Seleccionamos ADC6
	ADMUX = 0b101;
 122:	85 e0       	ldi	r24, 0x05	; 5
 124:	80 83       	st	Z, r24
	//Referencia AVCC = 5V
	ADMUX |= (1<<REFS0);
 126:	80 81       	ld	r24, Z
 128:	80 64       	ori	r24, 0x40	; 64
 12a:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
 12c:	80 81       	ld	r24, Z
 12e:	8f 77       	andi	r24, 0x7F	; 127
 130:	80 83       	st	Z, r24
	//Justificacion a la izquierda
	ADMUX |= (1<<ADLAR);
 132:	80 81       	ld	r24, Z
 134:	80 62       	ori	r24, 0x20	; 32
 136:	80 83       	st	Z, r24
	
	ADCSRA =0;
 138:	ea e7       	ldi	r30, 0x7A	; 122
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	10 82       	st	Z, r1
	//Habilitamos la interrupcion del ADC
	ADCSRA |= (1<<ADIE);
 13e:	80 81       	ld	r24, Z
 140:	88 60       	ori	r24, 0x08	; 8
 142:	80 83       	st	Z, r24
	//Habilitamos prescaller de 16M/128 Fadc = 125kHz
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 144:	80 81       	ld	r24, Z
 146:	87 60       	ori	r24, 0x07	; 7
 148:	80 83       	st	Z, r24
	//Habilitando el ADC
	ADCSRA |= (1<<ADEN);
 14a:	80 81       	ld	r24, Z
 14c:	80 68       	ori	r24, 0x80	; 128
 14e:	80 83       	st	Z, r24
 150:	08 95       	ret

00000152 <main>:

//Tabla
const uint8_t mylist[] = {0x3F, 0x0A, 0x5D, 0x5B, 0x6A, 0x73, 0x77, 0x1A, 0x7F, 0x7A, 0x7E, 0x67, 0x35, 0x4F, 0x75, 0x74};

int main(void) {
	setup(); // Configurar Puertos
 152:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	
    cli(); // Deshabilitar Interrupciones
 156:	f8 94       	cli
	
	//INTERRUPCIONES
    // Habilitar interrupciones de pin change para los pines PC0 y PC3
	PCMSK1 |= ((1 << PCINT11) | (1 << PCINT8)); // Habilitar interrupciones para PCINT11 y PCINT8
 158:	ec e6       	ldi	r30, 0x6C	; 108
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	89 60       	ori	r24, 0x09	; 9
 160:	80 83       	st	Z, r24
    PCICR |= (1 << PCIE1); // PCINT1 8-14 Grupo 1
 162:	e8 e6       	ldi	r30, 0x68	; 104
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	82 60       	ori	r24, 0x02	; 2
 16a:	80 83       	st	Z, r24
	
	//ADC
	DDRD |=0xFF;
 16c:	8a b1       	in	r24, 0x0a	; 10
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;
 172:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0;
 174:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	initADC();
 178:	0e 94 8e 00 	call	0x11c	; 0x11c <initADC>
	
    sei(); // Habilitar Interrupciones Globales
 17c:	78 94       	sei

    while (1) {
        // Programa principal
		//Leds
		PORTB |= (1 << PB0);// Encender transistor en PB0
 17e:	85 b1       	in	r24, 0x05	; 5
 180:	81 60       	ori	r24, 0x01	; 1
 182:	85 b9       	out	0x05, r24	; 5
		PORTD = 0;// Limpiamos salida de leds
 184:	1b b8       	out	0x0b, r1	; 11
		PORTD = contador;// Mostrar valor de contador
 186:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador>
 18a:	8b b9       	out	0x0b, r24	; 11
 18c:	8f e9       	ldi	r24, 0x9F	; 159
 18e:	9f e0       	ldi	r25, 0x0F	; 15
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <main+0x3e>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0x44>
 196:	00 00       	nop
		_delay_ms(1);
		PORTB &= ~(1 << PB0);// Apagar transistor en PB0
 198:	85 b1       	in	r24, 0x05	; 5
 19a:	8e 7f       	andi	r24, 0xFE	; 254
 19c:	85 b9       	out	0x05, r24	; 5
 19e:	8f e9       	ldi	r24, 0x9F	; 159
 1a0:	9f e0       	ldi	r25, 0x0F	; 15
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <main+0x50>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <main+0x56>
 1a8:	00 00       	nop
		_delay_ms(1);
		ADCSRA |= (1<<ADSC);
 1aa:	ea e7       	ldi	r30, 0x7A	; 122
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	80 64       	ori	r24, 0x40	; 64
 1b2:	80 83       	st	Z, r24
 1b4:	8f e9       	ldi	r24, 0x9F	; 159
 1b6:	9f e0       	ldi	r25, 0x0F	; 15
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <main+0x66>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0x6c>
 1be:	00 00       	nop
 1c0:	de cf       	rjmp	.-68     	; 0x17e <main+0x2c>

000001c2 <__vector_21>:
	//Habilitando el ADC
	ADCSRA |= (1<<ADEN);

}

ISR(ADC_vect){
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	2f 93       	push	r18
 1ce:	3f 93       	push	r19
 1d0:	4f 93       	push	r20
 1d2:	5f 93       	push	r21
 1d4:	6f 93       	push	r22
 1d6:	7f 93       	push	r23
 1d8:	8f 93       	push	r24
 1da:	9f 93       	push	r25
 1dc:	af 93       	push	r26
 1de:	bf 93       	push	r27
 1e0:	ef 93       	push	r30
 1e2:	ff 93       	push	r31
	counter = ADCH;
 1e4:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 79 01 	call	0x2f2	; 0x2f2 <__floatunsisf>
 1f2:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <counter>
 1f6:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <counter+0x1>
 1fa:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <counter+0x2>
 1fe:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <counter+0x3>
	
	if(counter > 150){ 
 202:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <counter>
 206:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <counter+0x1>
 20a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <counter+0x2>
 20e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <counter+0x3>
 212:	20 e0       	ldi	r18, 0x00	; 0
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	46 e1       	ldi	r20, 0x16	; 22
 218:	53 e4       	ldi	r21, 0x43	; 67
 21a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <__gesf2>
 21e:	18 16       	cp	r1, r24
 220:	34 f4       	brge	.+12     	; 0x22e <__vector_21+0x6c>
		PP1 = 15;
 222:	8f e0       	ldi	r24, 0x0F	; 15
 224:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <PP1>
		PP2 = 0;
 228:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 22c:	15 c0       	rjmp	.+42     	; 0x258 <__vector_21+0x96>
		}
	else if(counter <= 150){
 22e:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <counter>
 232:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <counter+0x1>
 236:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <counter+0x2>
 23a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <counter+0x3>
 23e:	20 e0       	ldi	r18, 0x00	; 0
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	46 e1       	ldi	r20, 0x16	; 22
 244:	53 e4       	ldi	r21, 0x43	; 67
 246:	0e 94 74 01 	call	0x2e8	; 0x2e8 <__cmpsf2>
 24a:	18 16       	cp	r1, r24
 24c:	2c f0       	brlt	.+10     	; 0x258 <__vector_21+0x96>
		PP1 = 0;
 24e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <PP1>
		PP2 = 15;
 252:	8f e0       	ldi	r24, 0x0F	; 15
 254:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	}
	
	
	//Displays
	//D1
	PORTB |= (1 << PB1);// Encender transistor en PB1
 258:	85 b1       	in	r24, 0x05	; 5
 25a:	82 60       	ori	r24, 0x02	; 2
 25c:	85 b9       	out	0x05, r24	; 5
	//ADC
	PORTD = mylist[PP2];// Cargar valor a puerto
 25e:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	e0 50       	subi	r30, 0x00	; 0
 266:	ff 4f       	sbci	r31, 0xFF	; 255
 268:	80 81       	ld	r24, Z
 26a:	8b b9       	out	0x0b, r24	; 11
 26c:	8f e9       	ldi	r24, 0x9F	; 159
 26e:	9f e0       	ldi	r25, 0x0F	; 15
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <__vector_21+0xae>
 274:	00 c0       	rjmp	.+0      	; 0x276 <__vector_21+0xb4>
 276:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1 << PB1);// Apagar transistor en PB1
 278:	85 b1       	in	r24, 0x05	; 5
 27a:	8d 7f       	andi	r24, 0xFD	; 253
 27c:	85 b9       	out	0x05, r24	; 5
 27e:	8f e9       	ldi	r24, 0x9F	; 159
 280:	9f e0       	ldi	r25, 0x0F	; 15
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <__vector_21+0xc0>
 286:	00 c0       	rjmp	.+0      	; 0x288 <__vector_21+0xc6>
 288:	00 00       	nop
	_delay_ms(1);
	//D2
	PORTB |= (1 << PB2);// Encender transistor en PB2
 28a:	85 b1       	in	r24, 0x05	; 5
 28c:	84 60       	ori	r24, 0x04	; 4
 28e:	85 b9       	out	0x05, r24	; 5
	PORTD = mylist[PP1];// Cargar valor a puerto
 290:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <PP1>
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	e0 50       	subi	r30, 0x00	; 0
 298:	ff 4f       	sbci	r31, 0xFF	; 255
 29a:	80 81       	ld	r24, Z
 29c:	8b b9       	out	0x0b, r24	; 11
 29e:	8f e9       	ldi	r24, 0x9F	; 159
 2a0:	9f e0       	ldi	r25, 0x0F	; 15
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <__vector_21+0xe0>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <__vector_21+0xe6>
 2a8:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1 << PB2);// Apagar transistor en PB2
 2aa:	85 b1       	in	r24, 0x05	; 5
 2ac:	8b 7f       	andi	r24, 0xFB	; 251
 2ae:	85 b9       	out	0x05, r24	; 5
 2b0:	8f e9       	ldi	r24, 0x9F	; 159
 2b2:	9f e0       	ldi	r25, 0x0F	; 15
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <__vector_21+0xf2>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <__vector_21+0xf8>
 2ba:	00 00       	nop
	_delay_ms(1);
	
	ADCSRA |= (1<<ADIF);
 2bc:	ea e7       	ldi	r30, 0x7A	; 122
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	80 61       	ori	r24, 0x10	; 16
 2c4:	80 83       	st	Z, r24
}
 2c6:	ff 91       	pop	r31
 2c8:	ef 91       	pop	r30
 2ca:	bf 91       	pop	r27
 2cc:	af 91       	pop	r26
 2ce:	9f 91       	pop	r25
 2d0:	8f 91       	pop	r24
 2d2:	7f 91       	pop	r23
 2d4:	6f 91       	pop	r22
 2d6:	5f 91       	pop	r21
 2d8:	4f 91       	pop	r20
 2da:	3f 91       	pop	r19
 2dc:	2f 91       	pop	r18
 2de:	0f 90       	pop	r0
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	0f 90       	pop	r0
 2e4:	1f 90       	pop	r1
 2e6:	18 95       	reti

000002e8 <__cmpsf2>:
 2e8:	0e 94 b6 01 	call	0x36c	; 0x36c <__fp_cmp>
 2ec:	08 f4       	brcc	.+2      	; 0x2f0 <__cmpsf2+0x8>
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	08 95       	ret

000002f2 <__floatunsisf>:
 2f2:	e8 94       	clt
 2f4:	09 c0       	rjmp	.+18     	; 0x308 <__floatsisf+0x12>

000002f6 <__floatsisf>:
 2f6:	97 fb       	bst	r25, 7
 2f8:	3e f4       	brtc	.+14     	; 0x308 <__floatsisf+0x12>
 2fa:	90 95       	com	r25
 2fc:	80 95       	com	r24
 2fe:	70 95       	com	r23
 300:	61 95       	neg	r22
 302:	7f 4f       	sbci	r23, 0xFF	; 255
 304:	8f 4f       	sbci	r24, 0xFF	; 255
 306:	9f 4f       	sbci	r25, 0xFF	; 255
 308:	99 23       	and	r25, r25
 30a:	a9 f0       	breq	.+42     	; 0x336 <__floatsisf+0x40>
 30c:	f9 2f       	mov	r31, r25
 30e:	96 e9       	ldi	r25, 0x96	; 150
 310:	bb 27       	eor	r27, r27
 312:	93 95       	inc	r25
 314:	f6 95       	lsr	r31
 316:	87 95       	ror	r24
 318:	77 95       	ror	r23
 31a:	67 95       	ror	r22
 31c:	b7 95       	ror	r27
 31e:	f1 11       	cpse	r31, r1
 320:	f8 cf       	rjmp	.-16     	; 0x312 <__floatsisf+0x1c>
 322:	fa f4       	brpl	.+62     	; 0x362 <__floatsisf+0x6c>
 324:	bb 0f       	add	r27, r27
 326:	11 f4       	brne	.+4      	; 0x32c <__floatsisf+0x36>
 328:	60 ff       	sbrs	r22, 0
 32a:	1b c0       	rjmp	.+54     	; 0x362 <__floatsisf+0x6c>
 32c:	6f 5f       	subi	r22, 0xFF	; 255
 32e:	7f 4f       	sbci	r23, 0xFF	; 255
 330:	8f 4f       	sbci	r24, 0xFF	; 255
 332:	9f 4f       	sbci	r25, 0xFF	; 255
 334:	16 c0       	rjmp	.+44     	; 0x362 <__floatsisf+0x6c>
 336:	88 23       	and	r24, r24
 338:	11 f0       	breq	.+4      	; 0x33e <__floatsisf+0x48>
 33a:	96 e9       	ldi	r25, 0x96	; 150
 33c:	11 c0       	rjmp	.+34     	; 0x360 <__floatsisf+0x6a>
 33e:	77 23       	and	r23, r23
 340:	21 f0       	breq	.+8      	; 0x34a <__floatsisf+0x54>
 342:	9e e8       	ldi	r25, 0x8E	; 142
 344:	87 2f       	mov	r24, r23
 346:	76 2f       	mov	r23, r22
 348:	05 c0       	rjmp	.+10     	; 0x354 <__floatsisf+0x5e>
 34a:	66 23       	and	r22, r22
 34c:	71 f0       	breq	.+28     	; 0x36a <__floatsisf+0x74>
 34e:	96 e8       	ldi	r25, 0x86	; 134
 350:	86 2f       	mov	r24, r22
 352:	70 e0       	ldi	r23, 0x00	; 0
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	2a f0       	brmi	.+10     	; 0x362 <__floatsisf+0x6c>
 358:	9a 95       	dec	r25
 35a:	66 0f       	add	r22, r22
 35c:	77 1f       	adc	r23, r23
 35e:	88 1f       	adc	r24, r24
 360:	da f7       	brpl	.-10     	; 0x358 <__floatsisf+0x62>
 362:	88 0f       	add	r24, r24
 364:	96 95       	lsr	r25
 366:	87 95       	ror	r24
 368:	97 f9       	bld	r25, 7
 36a:	08 95       	ret

0000036c <__fp_cmp>:
 36c:	99 0f       	add	r25, r25
 36e:	00 08       	sbc	r0, r0
 370:	55 0f       	add	r21, r21
 372:	aa 0b       	sbc	r26, r26
 374:	e0 e8       	ldi	r30, 0x80	; 128
 376:	fe ef       	ldi	r31, 0xFE	; 254
 378:	16 16       	cp	r1, r22
 37a:	17 06       	cpc	r1, r23
 37c:	e8 07       	cpc	r30, r24
 37e:	f9 07       	cpc	r31, r25
 380:	c0 f0       	brcs	.+48     	; 0x3b2 <__fp_cmp+0x46>
 382:	12 16       	cp	r1, r18
 384:	13 06       	cpc	r1, r19
 386:	e4 07       	cpc	r30, r20
 388:	f5 07       	cpc	r31, r21
 38a:	98 f0       	brcs	.+38     	; 0x3b2 <__fp_cmp+0x46>
 38c:	62 1b       	sub	r22, r18
 38e:	73 0b       	sbc	r23, r19
 390:	84 0b       	sbc	r24, r20
 392:	95 0b       	sbc	r25, r21
 394:	39 f4       	brne	.+14     	; 0x3a4 <__fp_cmp+0x38>
 396:	0a 26       	eor	r0, r26
 398:	61 f0       	breq	.+24     	; 0x3b2 <__fp_cmp+0x46>
 39a:	23 2b       	or	r18, r19
 39c:	24 2b       	or	r18, r20
 39e:	25 2b       	or	r18, r21
 3a0:	21 f4       	brne	.+8      	; 0x3aa <__fp_cmp+0x3e>
 3a2:	08 95       	ret
 3a4:	0a 26       	eor	r0, r26
 3a6:	09 f4       	brne	.+2      	; 0x3aa <__fp_cmp+0x3e>
 3a8:	a1 40       	sbci	r26, 0x01	; 1
 3aa:	a6 95       	lsr	r26
 3ac:	8f ef       	ldi	r24, 0xFF	; 255
 3ae:	81 1d       	adc	r24, r1
 3b0:	81 1d       	adc	r24, r1
 3b2:	08 95       	ret

000003b4 <__gesf2>:
 3b4:	0e 94 b6 01 	call	0x36c	; 0x36c <__fp_cmp>
 3b8:	08 f4       	brcc	.+2      	; 0x3bc <__gesf2+0x8>
 3ba:	8f ef       	ldi	r24, 0xFF	; 255
 3bc:	08 95       	ret

000003be <_exit>:
 3be:	f8 94       	cli

000003c0 <__stop_program>:
 3c0:	ff cf       	rjmp	.-2      	; 0x3c0 <__stop_program>
