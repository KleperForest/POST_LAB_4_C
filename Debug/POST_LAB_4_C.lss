
POST_LAB_4_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000056c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  0000056c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000059c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000952  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000723  00000000  00000000  00000f6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000412  00000000  00000000  00001691  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040e  00000000  00000000  00001b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ba  00000000  00000000  00001f72  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000222c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 01 01 	jmp	0x202	; 0x202 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ef       	ldi	r30, 0xF8	; 248
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 30       	cpi	r26, 0x05	; 5
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a9 00 	call	0x152	; 0x152 <main>
  9e:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
    }
}

void setup(void) {
    // Configurar pines PB0 a PB2 como salidas para los transistores
    DDRB |= 0b00000111;
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	87 60       	ori	r24, 0x07	; 7
  aa:	84 b9       	out	0x04, r24	; 4

    // Configurar PC3 y PC0 como entradas con pull-up habilitado para los botones
    DDRC &= ~((1 << DDC3) | (1 << DDC0)); // Configurar como entrada
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	86 7f       	andi	r24, 0xF6	; 246
  b0:	87 b9       	out	0x07, r24	; 7
    PORTC |= ((1 << PORTC3) | (1 << PORTC0)); // Habilitar resistencias de pull-up en PC3 y PC0
  b2:	88 b1       	in	r24, 0x08	; 8
  b4:	89 60       	ori	r24, 0x09	; 9
  b6:	88 b9       	out	0x08, r24	; 8

    // Configurar pines PD0 a PD7 como salidas para los LEDs
    DDRD |= 0b11111111;
  b8:	8a b1       	in	r24, 0x0a	; 10
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	8a b9       	out	0x0a, r24	; 10
  be:	08 95       	ret

000000c0 <__vector_4>:
}

ISR(PCINT1_vect) {
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	8f e3       	ldi	r24, 0x3F	; 63
  d0:	9c e9       	ldi	r25, 0x9C	; 156
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <__vector_4+0x12>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <__vector_4+0x18>
  d8:	00 00       	nop
	_delay_ms(10);
    // Verificar si la interrupción fue causada por PCINT11 (PC3)
    if (PINC & (1 << PINC3)) {
  da:	33 9b       	sbis	0x06, 3	; 6
  dc:	05 c0       	rjmp	.+10     	; 0xe8 <__vector_4+0x28>
        contador++; // Incrementar contador si el botón en PC3 fue presionado
  de:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <contador>
  e2:	8f 5f       	subi	r24, 0xFF	; 255
  e4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <contador>
    }
    // Verificar si la interrupción fue causada por PCINT8 (PC0)
    if (PINC & (1 << PINC0)) {
  e8:	30 9b       	sbis	0x06, 0	; 6
  ea:	05 c0       	rjmp	.+10     	; 0xf6 <__vector_4+0x36>
        contador--; // Decrementar contador si el botón en PC0 fue presionado
  ec:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <contador>
  f0:	81 50       	subi	r24, 0x01	; 1
  f2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <contador>
	}
	contador = (contador > 255) ? 0 : contador;// Si contador Overflow 255 se resetea el contador
  f6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <contador>
  fa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <contador>
  fe:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <contador>
	contador = (contador < 0) ? 255 : contador;// Si contador Underflow 0 se setea a 255
 102:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <contador>
 106:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <contador>
 10a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <contador>
}
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <initADC>:

void initADC(void){
	//reiniciamos
	ADMUX = 0;
 11c:	ec e7       	ldi	r30, 0x7C	; 124
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	10 82       	st	Z, r1
	// Seleccionamos ADC6
	ADMUX = 0b110;
 122:	86 e0       	ldi	r24, 0x06	; 6
 124:	80 83       	st	Z, r24
	//Referencia AVCC = 5V
	ADMUX |= (1<<REFS0);
 126:	80 81       	ld	r24, Z
 128:	80 64       	ori	r24, 0x40	; 64
 12a:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
 12c:	80 81       	ld	r24, Z
 12e:	8f 77       	andi	r24, 0x7F	; 127
 130:	80 83       	st	Z, r24
	//Justificacion a la izquierda
	ADMUX |= (1<<ADLAR);
 132:	80 81       	ld	r24, Z
 134:	80 62       	ori	r24, 0x20	; 32
 136:	80 83       	st	Z, r24
	
	ADCSRA =0;
 138:	ea e7       	ldi	r30, 0x7A	; 122
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	10 82       	st	Z, r1
	//Habilitamos la interrupcion del ADC
	ADCSRA |= (1<<ADIE);
 13e:	80 81       	ld	r24, Z
 140:	88 60       	ori	r24, 0x08	; 8
 142:	80 83       	st	Z, r24
	//Habilitamos prescaller de 16M/128 Fadc = 125kHz
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 144:	80 81       	ld	r24, Z
 146:	87 60       	ori	r24, 0x07	; 7
 148:	80 83       	st	Z, r24
	//Habilitando el ADC
	ADCSRA |= (1<<ADEN);
 14a:	80 81       	ld	r24, Z
 14c:	80 68       	ori	r24, 0x80	; 128
 14e:	80 83       	st	Z, r24
 150:	08 95       	ret

00000152 <main>:

//Tabla
const uint8_t mylist[] = {0x7E, 0x28, 0x5D, 0x6D, 0x2B, 0x67, 0x77, 0x2C, 0x7F, 0x2F, 0x3F, 0x73, 0x56, 0x79, 0x57, 0x17};

int main(void) {
	setup(); // Configurar Puertos
 152:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	
    cli(); // Deshabilitar Interrupciones
 156:	f8 94       	cli
	
	//INTERRUPCIONES
    // Habilitar interrupciones de pin change para los pines PC0 y PC3
	PCMSK1 |= ((1 << PCINT11) | (1 << PCINT8)); // Habilitar interrupciones para PCINT11 y PCINT8
 158:	ec e6       	ldi	r30, 0x6C	; 108
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	89 60       	ori	r24, 0x09	; 9
 160:	80 83       	st	Z, r24
    PCICR |= (1 << PCIE1); // PCINT1 8-14 Grupo 1
 162:	e8 e6       	ldi	r30, 0x68	; 104
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	82 60       	ori	r24, 0x02	; 2
 16a:	80 83       	st	Z, r24
	
	//ADC
	DDRD |=0xFF;
 16c:	8a b1       	in	r24, 0x0a	; 10
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;
 172:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0;
 174:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	initADC();
 178:	0e 94 8e 00 	call	0x11c	; 0x11c <initADC>
	
    sei(); // Habilitar Interrupciones Globales
 17c:	78 94       	sei
    while (1) {
        // Programa principal
		
		//Displays
		//D1
		PORTB |= (1 << PB1);// Encender transistor en PB1
 17e:	85 b1       	in	r24, 0x05	; 5
 180:	82 60       	ori	r24, 0x02	; 2
 182:	85 b9       	out	0x05, r24	; 5
		//ADC
		ADCSRA |= (1<<ADSC);
 184:	ea e7       	ldi	r30, 0x7A	; 122
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	80 64       	ori	r24, 0x40	; 64
 18c:	80 83       	st	Z, r24
 18e:	8f e9       	ldi	r24, 0x9F	; 159
 190:	9f e0       	ldi	r25, 0x0F	; 15
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <main+0x40>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0x46>
 198:	00 00       	nop
		_delay_ms(1);
		PORTB &= ~(1 << PB1);// Apagar transistor en PB1
 19a:	85 b1       	in	r24, 0x05	; 5
 19c:	8d 7f       	andi	r24, 0xFD	; 253
 19e:	85 b9       	out	0x05, r24	; 5
 1a0:	8f e9       	ldi	r24, 0x9F	; 159
 1a2:	9f e0       	ldi	r25, 0x0F	; 15
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <main+0x52>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0x58>
 1aa:	00 00       	nop
		_delay_ms(1);
		//D2
		PORTB |= (1 << PB2);// Encender transistor en PB2
 1ac:	85 b1       	in	r24, 0x05	; 5
 1ae:	84 60       	ori	r24, 0x04	; 4
 1b0:	85 b9       	out	0x05, r24	; 5
		PORTD = 0b00100000;// Mostrar segundo display
 1b2:	80 e2       	ldi	r24, 0x20	; 32
 1b4:	8b b9       	out	0x0b, r24	; 11
 1b6:	8f e9       	ldi	r24, 0x9F	; 159
 1b8:	9f e0       	ldi	r25, 0x0F	; 15
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <main+0x68>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <main+0x6e>
 1c0:	00 00       	nop
		_delay_ms(1);
		PORTB &= ~(1 << PB2);// Apagar transistor en PB2
 1c2:	85 b1       	in	r24, 0x05	; 5
 1c4:	8b 7f       	andi	r24, 0xFB	; 251
 1c6:	85 b9       	out	0x05, r24	; 5
 1c8:	8f e9       	ldi	r24, 0x9F	; 159
 1ca:	9f e0       	ldi	r25, 0x0F	; 15
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <main+0x7a>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <main+0x80>
 1d2:	00 00       	nop
		_delay_ms(1);
		
		//Leds
		PORTB |= (1 << PB0);// Encender transistor en PB0
 1d4:	85 b1       	in	r24, 0x05	; 5
 1d6:	81 60       	ori	r24, 0x01	; 1
 1d8:	85 b9       	out	0x05, r24	; 5
		PORTD = 0;// Limpiamos salida de leds
 1da:	1b b8       	out	0x0b, r1	; 11
		PORTD = contador;// Mostrar valor de contador
 1dc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <contador>
 1e0:	8b b9       	out	0x0b, r24	; 11
 1e2:	8f e9       	ldi	r24, 0x9F	; 159
 1e4:	9f e0       	ldi	r25, 0x0F	; 15
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <main+0x94>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <main+0x9a>
 1ec:	00 00       	nop
		_delay_ms(1);
		PORTB &= ~(1 << PB0);// Apagar transistor en PB0
 1ee:	85 b1       	in	r24, 0x05	; 5
 1f0:	8e 7f       	andi	r24, 0xFE	; 254
 1f2:	85 b9       	out	0x05, r24	; 5
 1f4:	8f e9       	ldi	r24, 0x9F	; 159
 1f6:	9f e0       	ldi	r25, 0x0F	; 15
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <main+0xa6>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <main+0xac>
 1fe:	00 00       	nop
 200:	be cf       	rjmp	.-132    	; 0x17e <main+0x2c>

00000202 <__vector_21>:
	//Habilitando el ADC
	ADCSRA |= (1<<ADEN);

}

ISR(ADC_vect){
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	2f 93       	push	r18
 20e:	3f 93       	push	r19
 210:	4f 93       	push	r20
 212:	5f 93       	push	r21
 214:	6f 93       	push	r22
 216:	7f 93       	push	r23
 218:	8f 93       	push	r24
 21a:	9f 93       	push	r25
 21c:	af 93       	push	r26
 21e:	bf 93       	push	r27
 220:	ef 93       	push	r30
 222:	ff 93       	push	r31
	counter = 0.2493*ADCH;
 224:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 81 01 	call	0x302	; 0x302 <__floatsisf>
 232:	20 e8       	ldi	r18, 0x80	; 128
 234:	38 e4       	ldi	r19, 0x48	; 72
 236:	4f e7       	ldi	r20, 0x7F	; 127
 238:	5e e3       	ldi	r21, 0x3E	; 62
 23a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <__mulsf3>
 23e:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 242:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 246:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 24a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	
	if(counter = 0){ PP1 = 0;
 24e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 252:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 256:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 25a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
					PP2 = 0;}
	
	
	PORTD = counter;
 25e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 262:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 266:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 26a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 26e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__fixunssfsi>
 272:	6b b9       	out	0x0b, r22	; 11
	ADCSRA |= (1<<ADIF);
 274:	ea e7       	ldi	r30, 0x7A	; 122
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	80 61       	ori	r24, 0x10	; 16
 27c:	80 83       	st	Z, r24
}
 27e:	ff 91       	pop	r31
 280:	ef 91       	pop	r30
 282:	bf 91       	pop	r27
 284:	af 91       	pop	r26
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	7f 91       	pop	r23
 28c:	6f 91       	pop	r22
 28e:	5f 91       	pop	r21
 290:	4f 91       	pop	r20
 292:	3f 91       	pop	r19
 294:	2f 91       	pop	r18
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

000002a0 <__fixunssfsi>:
 2a0:	0e 94 c4 01 	call	0x388	; 0x388 <__fp_splitA>
 2a4:	88 f0       	brcs	.+34     	; 0x2c8 <__fixunssfsi+0x28>
 2a6:	9f 57       	subi	r25, 0x7F	; 127
 2a8:	98 f0       	brcs	.+38     	; 0x2d0 <__fixunssfsi+0x30>
 2aa:	b9 2f       	mov	r27, r25
 2ac:	99 27       	eor	r25, r25
 2ae:	b7 51       	subi	r27, 0x17	; 23
 2b0:	b0 f0       	brcs	.+44     	; 0x2de <__fixunssfsi+0x3e>
 2b2:	e1 f0       	breq	.+56     	; 0x2ec <__fixunssfsi+0x4c>
 2b4:	66 0f       	add	r22, r22
 2b6:	77 1f       	adc	r23, r23
 2b8:	88 1f       	adc	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	1a f0       	brmi	.+6      	; 0x2c4 <__fixunssfsi+0x24>
 2be:	ba 95       	dec	r27
 2c0:	c9 f7       	brne	.-14     	; 0x2b4 <__fixunssfsi+0x14>
 2c2:	14 c0       	rjmp	.+40     	; 0x2ec <__fixunssfsi+0x4c>
 2c4:	b1 30       	cpi	r27, 0x01	; 1
 2c6:	91 f0       	breq	.+36     	; 0x2ec <__fixunssfsi+0x4c>
 2c8:	0e 94 de 01 	call	0x3bc	; 0x3bc <__fp_zero>
 2cc:	b1 e0       	ldi	r27, 0x01	; 1
 2ce:	08 95       	ret
 2d0:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__fp_zero>
 2d4:	67 2f       	mov	r22, r23
 2d6:	78 2f       	mov	r23, r24
 2d8:	88 27       	eor	r24, r24
 2da:	b8 5f       	subi	r27, 0xF8	; 248
 2dc:	39 f0       	breq	.+14     	; 0x2ec <__fixunssfsi+0x4c>
 2de:	b9 3f       	cpi	r27, 0xF9	; 249
 2e0:	cc f3       	brlt	.-14     	; 0x2d4 <__fixunssfsi+0x34>
 2e2:	86 95       	lsr	r24
 2e4:	77 95       	ror	r23
 2e6:	67 95       	ror	r22
 2e8:	b3 95       	inc	r27
 2ea:	d9 f7       	brne	.-10     	; 0x2e2 <__fixunssfsi+0x42>
 2ec:	3e f4       	brtc	.+14     	; 0x2fc <__fixunssfsi+0x5c>
 2ee:	90 95       	com	r25
 2f0:	80 95       	com	r24
 2f2:	70 95       	com	r23
 2f4:	61 95       	neg	r22
 2f6:	7f 4f       	sbci	r23, 0xFF	; 255
 2f8:	8f 4f       	sbci	r24, 0xFF	; 255
 2fa:	9f 4f       	sbci	r25, 0xFF	; 255
 2fc:	08 95       	ret

000002fe <__floatunsisf>:
 2fe:	e8 94       	clt
 300:	09 c0       	rjmp	.+18     	; 0x314 <__floatsisf+0x12>

00000302 <__floatsisf>:
 302:	97 fb       	bst	r25, 7
 304:	3e f4       	brtc	.+14     	; 0x314 <__floatsisf+0x12>
 306:	90 95       	com	r25
 308:	80 95       	com	r24
 30a:	70 95       	com	r23
 30c:	61 95       	neg	r22
 30e:	7f 4f       	sbci	r23, 0xFF	; 255
 310:	8f 4f       	sbci	r24, 0xFF	; 255
 312:	9f 4f       	sbci	r25, 0xFF	; 255
 314:	99 23       	and	r25, r25
 316:	a9 f0       	breq	.+42     	; 0x342 <__floatsisf+0x40>
 318:	f9 2f       	mov	r31, r25
 31a:	96 e9       	ldi	r25, 0x96	; 150
 31c:	bb 27       	eor	r27, r27
 31e:	93 95       	inc	r25
 320:	f6 95       	lsr	r31
 322:	87 95       	ror	r24
 324:	77 95       	ror	r23
 326:	67 95       	ror	r22
 328:	b7 95       	ror	r27
 32a:	f1 11       	cpse	r31, r1
 32c:	f8 cf       	rjmp	.-16     	; 0x31e <__floatsisf+0x1c>
 32e:	fa f4       	brpl	.+62     	; 0x36e <__floatsisf+0x6c>
 330:	bb 0f       	add	r27, r27
 332:	11 f4       	brne	.+4      	; 0x338 <__floatsisf+0x36>
 334:	60 ff       	sbrs	r22, 0
 336:	1b c0       	rjmp	.+54     	; 0x36e <__floatsisf+0x6c>
 338:	6f 5f       	subi	r22, 0xFF	; 255
 33a:	7f 4f       	sbci	r23, 0xFF	; 255
 33c:	8f 4f       	sbci	r24, 0xFF	; 255
 33e:	9f 4f       	sbci	r25, 0xFF	; 255
 340:	16 c0       	rjmp	.+44     	; 0x36e <__floatsisf+0x6c>
 342:	88 23       	and	r24, r24
 344:	11 f0       	breq	.+4      	; 0x34a <__floatsisf+0x48>
 346:	96 e9       	ldi	r25, 0x96	; 150
 348:	11 c0       	rjmp	.+34     	; 0x36c <__floatsisf+0x6a>
 34a:	77 23       	and	r23, r23
 34c:	21 f0       	breq	.+8      	; 0x356 <__floatsisf+0x54>
 34e:	9e e8       	ldi	r25, 0x8E	; 142
 350:	87 2f       	mov	r24, r23
 352:	76 2f       	mov	r23, r22
 354:	05 c0       	rjmp	.+10     	; 0x360 <__floatsisf+0x5e>
 356:	66 23       	and	r22, r22
 358:	71 f0       	breq	.+28     	; 0x376 <__floatsisf+0x74>
 35a:	96 e8       	ldi	r25, 0x86	; 134
 35c:	86 2f       	mov	r24, r22
 35e:	70 e0       	ldi	r23, 0x00	; 0
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	2a f0       	brmi	.+10     	; 0x36e <__floatsisf+0x6c>
 364:	9a 95       	dec	r25
 366:	66 0f       	add	r22, r22
 368:	77 1f       	adc	r23, r23
 36a:	88 1f       	adc	r24, r24
 36c:	da f7       	brpl	.-10     	; 0x364 <__floatsisf+0x62>
 36e:	88 0f       	add	r24, r24
 370:	96 95       	lsr	r25
 372:	87 95       	ror	r24
 374:	97 f9       	bld	r25, 7
 376:	08 95       	ret

00000378 <__fp_split3>:
 378:	57 fd       	sbrc	r21, 7
 37a:	90 58       	subi	r25, 0x80	; 128
 37c:	44 0f       	add	r20, r20
 37e:	55 1f       	adc	r21, r21
 380:	59 f0       	breq	.+22     	; 0x398 <__fp_splitA+0x10>
 382:	5f 3f       	cpi	r21, 0xFF	; 255
 384:	71 f0       	breq	.+28     	; 0x3a2 <__fp_splitA+0x1a>
 386:	47 95       	ror	r20

00000388 <__fp_splitA>:
 388:	88 0f       	add	r24, r24
 38a:	97 fb       	bst	r25, 7
 38c:	99 1f       	adc	r25, r25
 38e:	61 f0       	breq	.+24     	; 0x3a8 <__fp_splitA+0x20>
 390:	9f 3f       	cpi	r25, 0xFF	; 255
 392:	79 f0       	breq	.+30     	; 0x3b2 <__fp_splitA+0x2a>
 394:	87 95       	ror	r24
 396:	08 95       	ret
 398:	12 16       	cp	r1, r18
 39a:	13 06       	cpc	r1, r19
 39c:	14 06       	cpc	r1, r20
 39e:	55 1f       	adc	r21, r21
 3a0:	f2 cf       	rjmp	.-28     	; 0x386 <__fp_split3+0xe>
 3a2:	46 95       	lsr	r20
 3a4:	f1 df       	rcall	.-30     	; 0x388 <__fp_splitA>
 3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <__fp_splitA+0x30>
 3a8:	16 16       	cp	r1, r22
 3aa:	17 06       	cpc	r1, r23
 3ac:	18 06       	cpc	r1, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	f1 cf       	rjmp	.-30     	; 0x394 <__fp_splitA+0xc>
 3b2:	86 95       	lsr	r24
 3b4:	71 05       	cpc	r23, r1
 3b6:	61 05       	cpc	r22, r1
 3b8:	08 94       	sec
 3ba:	08 95       	ret

000003bc <__fp_zero>:
 3bc:	e8 94       	clt

000003be <__fp_szero>:
 3be:	bb 27       	eor	r27, r27
 3c0:	66 27       	eor	r22, r22
 3c2:	77 27       	eor	r23, r23
 3c4:	cb 01       	movw	r24, r22
 3c6:	97 f9       	bld	r25, 7
 3c8:	08 95       	ret

000003ca <__mulsf3>:
 3ca:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__mulsf3x>
 3ce:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__fp_round>
 3d2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__fp_pscA>
 3d6:	38 f0       	brcs	.+14     	; 0x3e6 <__mulsf3+0x1c>
 3d8:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__fp_pscB>
 3dc:	20 f0       	brcs	.+8      	; 0x3e6 <__mulsf3+0x1c>
 3de:	95 23       	and	r25, r21
 3e0:	11 f0       	breq	.+4      	; 0x3e6 <__mulsf3+0x1c>
 3e2:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <__fp_inf>
 3e6:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__fp_nan>
 3ea:	11 24       	eor	r1, r1
 3ec:	0c 94 df 01 	jmp	0x3be	; 0x3be <__fp_szero>

000003f0 <__mulsf3x>:
 3f0:	0e 94 bc 01 	call	0x378	; 0x378 <__fp_split3>
 3f4:	70 f3       	brcs	.-36     	; 0x3d2 <__mulsf3+0x8>

000003f6 <__mulsf3_pse>:
 3f6:	95 9f       	mul	r25, r21
 3f8:	c1 f3       	breq	.-16     	; 0x3ea <__mulsf3+0x20>
 3fa:	95 0f       	add	r25, r21
 3fc:	50 e0       	ldi	r21, 0x00	; 0
 3fe:	55 1f       	adc	r21, r21
 400:	62 9f       	mul	r22, r18
 402:	f0 01       	movw	r30, r0
 404:	72 9f       	mul	r23, r18
 406:	bb 27       	eor	r27, r27
 408:	f0 0d       	add	r31, r0
 40a:	b1 1d       	adc	r27, r1
 40c:	63 9f       	mul	r22, r19
 40e:	aa 27       	eor	r26, r26
 410:	f0 0d       	add	r31, r0
 412:	b1 1d       	adc	r27, r1
 414:	aa 1f       	adc	r26, r26
 416:	64 9f       	mul	r22, r20
 418:	66 27       	eor	r22, r22
 41a:	b0 0d       	add	r27, r0
 41c:	a1 1d       	adc	r26, r1
 41e:	66 1f       	adc	r22, r22
 420:	82 9f       	mul	r24, r18
 422:	22 27       	eor	r18, r18
 424:	b0 0d       	add	r27, r0
 426:	a1 1d       	adc	r26, r1
 428:	62 1f       	adc	r22, r18
 42a:	73 9f       	mul	r23, r19
 42c:	b0 0d       	add	r27, r0
 42e:	a1 1d       	adc	r26, r1
 430:	62 1f       	adc	r22, r18
 432:	83 9f       	mul	r24, r19
 434:	a0 0d       	add	r26, r0
 436:	61 1d       	adc	r22, r1
 438:	22 1f       	adc	r18, r18
 43a:	74 9f       	mul	r23, r20
 43c:	33 27       	eor	r19, r19
 43e:	a0 0d       	add	r26, r0
 440:	61 1d       	adc	r22, r1
 442:	23 1f       	adc	r18, r19
 444:	84 9f       	mul	r24, r20
 446:	60 0d       	add	r22, r0
 448:	21 1d       	adc	r18, r1
 44a:	82 2f       	mov	r24, r18
 44c:	76 2f       	mov	r23, r22
 44e:	6a 2f       	mov	r22, r26
 450:	11 24       	eor	r1, r1
 452:	9f 57       	subi	r25, 0x7F	; 127
 454:	50 40       	sbci	r21, 0x00	; 0
 456:	9a f0       	brmi	.+38     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 458:	f1 f0       	breq	.+60     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 45a:	88 23       	and	r24, r24
 45c:	4a f0       	brmi	.+18     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 45e:	ee 0f       	add	r30, r30
 460:	ff 1f       	adc	r31, r31
 462:	bb 1f       	adc	r27, r27
 464:	66 1f       	adc	r22, r22
 466:	77 1f       	adc	r23, r23
 468:	88 1f       	adc	r24, r24
 46a:	91 50       	subi	r25, 0x01	; 1
 46c:	50 40       	sbci	r21, 0x00	; 0
 46e:	a9 f7       	brne	.-22     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 470:	9e 3f       	cpi	r25, 0xFE	; 254
 472:	51 05       	cpc	r21, r1
 474:	80 f0       	brcs	.+32     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 476:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <__fp_inf>
 47a:	0c 94 df 01 	jmp	0x3be	; 0x3be <__fp_szero>
 47e:	5f 3f       	cpi	r21, 0xFF	; 255
 480:	e4 f3       	brlt	.-8      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 482:	98 3e       	cpi	r25, 0xE8	; 232
 484:	d4 f3       	brlt	.-12     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 486:	86 95       	lsr	r24
 488:	77 95       	ror	r23
 48a:	67 95       	ror	r22
 48c:	b7 95       	ror	r27
 48e:	f7 95       	ror	r31
 490:	e7 95       	ror	r30
 492:	9f 5f       	subi	r25, 0xFF	; 255
 494:	c1 f7       	brne	.-16     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 496:	fe 2b       	or	r31, r30
 498:	88 0f       	add	r24, r24
 49a:	91 1d       	adc	r25, r1
 49c:	96 95       	lsr	r25
 49e:	87 95       	ror	r24
 4a0:	97 f9       	bld	r25, 7
 4a2:	08 95       	ret

000004a4 <__fp_inf>:
 4a4:	97 f9       	bld	r25, 7
 4a6:	9f 67       	ori	r25, 0x7F	; 127
 4a8:	80 e8       	ldi	r24, 0x80	; 128
 4aa:	70 e0       	ldi	r23, 0x00	; 0
 4ac:	60 e0       	ldi	r22, 0x00	; 0
 4ae:	08 95       	ret

000004b0 <__fp_nan>:
 4b0:	9f ef       	ldi	r25, 0xFF	; 255
 4b2:	80 ec       	ldi	r24, 0xC0	; 192
 4b4:	08 95       	ret

000004b6 <__fp_pscA>:
 4b6:	00 24       	eor	r0, r0
 4b8:	0a 94       	dec	r0
 4ba:	16 16       	cp	r1, r22
 4bc:	17 06       	cpc	r1, r23
 4be:	18 06       	cpc	r1, r24
 4c0:	09 06       	cpc	r0, r25
 4c2:	08 95       	ret

000004c4 <__fp_pscB>:
 4c4:	00 24       	eor	r0, r0
 4c6:	0a 94       	dec	r0
 4c8:	12 16       	cp	r1, r18
 4ca:	13 06       	cpc	r1, r19
 4cc:	14 06       	cpc	r1, r20
 4ce:	05 06       	cpc	r0, r21
 4d0:	08 95       	ret

000004d2 <__fp_round>:
 4d2:	09 2e       	mov	r0, r25
 4d4:	03 94       	inc	r0
 4d6:	00 0c       	add	r0, r0
 4d8:	11 f4       	brne	.+4      	; 0x4de <__fp_round+0xc>
 4da:	88 23       	and	r24, r24
 4dc:	52 f0       	brmi	.+20     	; 0x4f2 <__fp_round+0x20>
 4de:	bb 0f       	add	r27, r27
 4e0:	40 f4       	brcc	.+16     	; 0x4f2 <__fp_round+0x20>
 4e2:	bf 2b       	or	r27, r31
 4e4:	11 f4       	brne	.+4      	; 0x4ea <__fp_round+0x18>
 4e6:	60 ff       	sbrs	r22, 0
 4e8:	04 c0       	rjmp	.+8      	; 0x4f2 <__fp_round+0x20>
 4ea:	6f 5f       	subi	r22, 0xFF	; 255
 4ec:	7f 4f       	sbci	r23, 0xFF	; 255
 4ee:	8f 4f       	sbci	r24, 0xFF	; 255
 4f0:	9f 4f       	sbci	r25, 0xFF	; 255
 4f2:	08 95       	ret

000004f4 <_exit>:
 4f4:	f8 94       	cli

000004f6 <__stop_program>:
 4f6:	ff cf       	rjmp	.-2      	; 0x4f6 <__stop_program>
