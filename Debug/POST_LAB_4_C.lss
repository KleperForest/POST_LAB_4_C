
POST_LAB_4_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000052a  000005be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000052a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800110  00800110  000005ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000600  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000952  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000723  00000000  00000000  00000fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000424  00000000  00000000  000016f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001b1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040e  00000000  00000000  00001bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ba  00000000  00000000  00001fea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000022a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e2       	ldi	r30, 0x2A	; 42
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 31       	cpi	r26, 0x17	; 23
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a9 00 	call	0x152	; 0x152 <main>
  9e:	0c 94 93 02 	jmp	0x526	; 0x526 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
    }
}

void setup(void) {
    // Configurar pines PB0 a PB2 como salidas para los transistores
    DDRB |= 0b00000111;
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	87 60       	ori	r24, 0x07	; 7
  aa:	84 b9       	out	0x04, r24	; 4

    // Configurar PC3 y PC0 como entradas con pull-up habilitado para los botones
    DDRC &= ~((1 << DDC3) | (1 << DDC0)); // Configurar como entrada
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	86 7f       	andi	r24, 0xF6	; 246
  b0:	87 b9       	out	0x07, r24	; 7
    PORTC |= ((1 << PORTC3) | (1 << PORTC0)); // Habilitar resistencias de pull-up en PC3 y PC0
  b2:	88 b1       	in	r24, 0x08	; 8
  b4:	89 60       	ori	r24, 0x09	; 9
  b6:	88 b9       	out	0x08, r24	; 8

    // Configurar pines PD0 a PD7 como salidas para los LEDs
    DDRD |= 0b11111111;
  b8:	8a b1       	in	r24, 0x0a	; 10
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	8a b9       	out	0x0a, r24	; 10
  be:	08 95       	ret

000000c0 <__vector_4>:
}

ISR(PCINT1_vect) {
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	8f e3       	ldi	r24, 0x3F	; 63
  d0:	9c e9       	ldi	r25, 0x9C	; 156
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <__vector_4+0x12>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <__vector_4+0x18>
  d8:	00 00       	nop
	_delay_ms(10);
    // Verificar si la interrupción fue causada por PCINT11 (PC3)
    if (PINC & (1 << PINC3)) {
  da:	33 9b       	sbis	0x06, 3	; 6
  dc:	05 c0       	rjmp	.+10     	; 0xe8 <__vector_4+0x28>
        contador++; // Incrementar contador si el botón en PC3 fue presionado
  de:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador>
  e2:	8f 5f       	subi	r24, 0xFF	; 255
  e4:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <contador>
    }
    // Verificar si la interrupción fue causada por PCINT8 (PC0)
    if (PINC & (1 << PINC0)) {
  e8:	30 9b       	sbis	0x06, 0	; 6
  ea:	05 c0       	rjmp	.+10     	; 0xf6 <__vector_4+0x36>
        contador--; // Decrementar contador si el botón en PC0 fue presionado
  ec:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador>
  f0:	81 50       	subi	r24, 0x01	; 1
  f2:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <contador>
	}
	contador = (contador > 255) ? 0 : contador;// Si contador Overflow 255 se resetea el contador
  f6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador>
  fa:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador>
  fe:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <contador>
	contador = (contador < 0) ? 255 : contador;// Si contador Underflow 0 se setea a 255
 102:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador>
 106:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador>
 10a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <contador>
}
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <initADC>:

void initADC(void){
	//reiniciamos
	ADMUX = 0;
 11c:	ec e7       	ldi	r30, 0x7C	; 124
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	10 82       	st	Z, r1
	// Seleccionamos ADC6
	ADMUX = 0b110;
 122:	86 e0       	ldi	r24, 0x06	; 6
 124:	80 83       	st	Z, r24
	//Referencia AVCC = 5V
	ADMUX |= (1<<REFS0);
 126:	80 81       	ld	r24, Z
 128:	80 64       	ori	r24, 0x40	; 64
 12a:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
 12c:	80 81       	ld	r24, Z
 12e:	8f 77       	andi	r24, 0x7F	; 127
 130:	80 83       	st	Z, r24
	//Justificacion a la izquierda
	ADMUX |= (1<<ADLAR);
 132:	80 81       	ld	r24, Z
 134:	80 62       	ori	r24, 0x20	; 32
 136:	80 83       	st	Z, r24
	
	ADCSRA =0;
 138:	ea e7       	ldi	r30, 0x7A	; 122
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	10 82       	st	Z, r1
	//Habilitamos la interrupcion del ADC
	ADCSRA |= (1<<ADIE);
 13e:	80 81       	ld	r24, Z
 140:	88 60       	ori	r24, 0x08	; 8
 142:	80 83       	st	Z, r24
	//Habilitamos prescaller de 16M/128 Fadc = 125kHz
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 144:	80 81       	ld	r24, Z
 146:	87 60       	ori	r24, 0x07	; 7
 148:	80 83       	st	Z, r24
	//Habilitando el ADC
	ADCSRA |= (1<<ADEN);
 14a:	80 81       	ld	r24, Z
 14c:	80 68       	ori	r24, 0x80	; 128
 14e:	80 83       	st	Z, r24
 150:	08 95       	ret

00000152 <main>:

//Tabla
const uint8_t mylist[] = {0x7E, 0x28, 0x5D, 0x6D, 0x2B, 0x67, 0x77, 0x2C, 0x7F, 0x2F, 0x3F, 0x73, 0x56, 0x79, 0x57, 0x17};

int main(void) {
	setup(); // Configurar Puertos
 152:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	
    cli(); // Deshabilitar Interrupciones
 156:	f8 94       	cli
	
	//INTERRUPCIONES
    // Habilitar interrupciones de pin change para los pines PC0 y PC3
	PCMSK1 |= ((1 << PCINT11) | (1 << PCINT8)); // Habilitar interrupciones para PCINT11 y PCINT8
 158:	ec e6       	ldi	r30, 0x6C	; 108
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	89 60       	ori	r24, 0x09	; 9
 160:	80 83       	st	Z, r24
    PCICR |= (1 << PCIE1); // PCINT1 8-14 Grupo 1
 162:	e8 e6       	ldi	r30, 0x68	; 104
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	82 60       	ori	r24, 0x02	; 2
 16a:	80 83       	st	Z, r24
	
	//ADC
	DDRD |=0xFF;
 16c:	8a b1       	in	r24, 0x0a	; 10
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;
 172:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0;
 174:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	initADC();
 178:	0e 94 8e 00 	call	0x11c	; 0x11c <initADC>
	
    sei(); // Habilitar Interrupciones Globales
 17c:	78 94       	sei
    while (1) {
        // Programa principal
		
		//Displays
		//D1
		PORTB |= (1 << PB1);// Encender transistor en PB1
 17e:	85 b1       	in	r24, 0x05	; 5
 180:	82 60       	ori	r24, 0x02	; 2
 182:	85 b9       	out	0x05, r24	; 5
		//ADC
		PORTD = mylist[PP1];// Cargar valor a puerto
 184:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <PP1>
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	e0 50       	subi	r30, 0x00	; 0
 18c:	ff 4f       	sbci	r31, 0xFF	; 255
 18e:	80 81       	ld	r24, Z
 190:	8b b9       	out	0x0b, r24	; 11
 192:	8f e9       	ldi	r24, 0x9F	; 159
 194:	9f e0       	ldi	r25, 0x0F	; 15
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <main+0x44>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x4a>
 19c:	00 00       	nop
		_delay_ms(1);
		PORTB &= ~(1 << PB1);// Apagar transistor en PB1
 19e:	85 b1       	in	r24, 0x05	; 5
 1a0:	8d 7f       	andi	r24, 0xFD	; 253
 1a2:	85 b9       	out	0x05, r24	; 5
 1a4:	8f e9       	ldi	r24, 0x9F	; 159
 1a6:	9f e0       	ldi	r25, 0x0F	; 15
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <main+0x56>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <main+0x5c>
 1ae:	00 00       	nop
		_delay_ms(1);
		//D2
		PORTB |= (1 << PB2);// Encender transistor en PB2
 1b0:	85 b1       	in	r24, 0x05	; 5
 1b2:	84 60       	ori	r24, 0x04	; 4
 1b4:	85 b9       	out	0x05, r24	; 5
		PORTD = mylist[PP2];// Cargar valor a puerto
 1b6:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	e0 50       	subi	r30, 0x00	; 0
 1be:	ff 4f       	sbci	r31, 0xFF	; 255
 1c0:	80 81       	ld	r24, Z
 1c2:	8b b9       	out	0x0b, r24	; 11
 1c4:	8f e9       	ldi	r24, 0x9F	; 159
 1c6:	9f e0       	ldi	r25, 0x0F	; 15
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <main+0x76>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <main+0x7c>
 1ce:	00 00       	nop
		_delay_ms(1);
		PORTB &= ~(1 << PB2);// Apagar transistor en PB2
 1d0:	85 b1       	in	r24, 0x05	; 5
 1d2:	8b 7f       	andi	r24, 0xFB	; 251
 1d4:	85 b9       	out	0x05, r24	; 5
 1d6:	8f e9       	ldi	r24, 0x9F	; 159
 1d8:	9f e0       	ldi	r25, 0x0F	; 15
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <main+0x88>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <main+0x8e>
 1e0:	00 00       	nop
		_delay_ms(1);
		
		//Leds
		PORTB |= (1 << PB0);// Encender transistor en PB0
 1e2:	85 b1       	in	r24, 0x05	; 5
 1e4:	81 60       	ori	r24, 0x01	; 1
 1e6:	85 b9       	out	0x05, r24	; 5
		PORTD = 0;// Limpiamos salida de leds
 1e8:	1b b8       	out	0x0b, r1	; 11
		PORTD = contador;// Mostrar valor de contador
 1ea:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador>
 1ee:	8b b9       	out	0x0b, r24	; 11
 1f0:	8f e9       	ldi	r24, 0x9F	; 159
 1f2:	9f e0       	ldi	r25, 0x0F	; 15
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <main+0xa2>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <main+0xa8>
 1fa:	00 00       	nop
		_delay_ms(1);
		PORTB &= ~(1 << PB0);// Apagar transistor en PB0
 1fc:	85 b1       	in	r24, 0x05	; 5
 1fe:	8e 7f       	andi	r24, 0xFE	; 254
 200:	85 b9       	out	0x05, r24	; 5
 202:	8f e9       	ldi	r24, 0x9F	; 159
 204:	9f e0       	ldi	r25, 0x0F	; 15
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <main+0xb4>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <main+0xba>
 20c:	00 00       	nop
 20e:	b7 cf       	rjmp	.-146    	; 0x17e <main+0x2c>

00000210 <__vector_21>:
	//Habilitando el ADC
	ADCSRA |= (1<<ADEN);

}

ISR(ADC_vect){
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	2f 93       	push	r18
 21c:	3f 93       	push	r19
 21e:	4f 93       	push	r20
 220:	5f 93       	push	r21
 222:	6f 93       	push	r22
 224:	7f 93       	push	r23
 226:	8f 93       	push	r24
 228:	9f 93       	push	r25
 22a:	af 93       	push	r26
 22c:	bf 93       	push	r27
 22e:	ef 93       	push	r30
 230:	ff 93       	push	r31
	counter = 0.2493*ADCH;
 232:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 236:	70 e0       	ldi	r23, 0x00	; 0
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <__floatsisf>
 240:	20 e8       	ldi	r18, 0x80	; 128
 242:	38 e4       	ldi	r19, 0x48	; 72
 244:	4f e7       	ldi	r20, 0x7F	; 127
 246:	5e e3       	ldi	r21, 0x3E	; 62
 248:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__mulsf3>
 24c:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <counter>
 250:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <counter+0x1>
 254:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <counter+0x2>
 258:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <counter+0x3>
	
	if(counter > 127){
 25c:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <counter>
 260:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <counter+0x1>
 264:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <counter+0x2>
 268:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <counter+0x3>
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	4e ef       	ldi	r20, 0xFE	; 254
 272:	52 e4       	ldi	r21, 0x42	; 66
 274:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__gesf2>
 278:	18 16       	cp	r1, r24
 27a:	34 f4       	brge	.+12     	; 0x288 <__vector_21+0x78>
		PP1 = 15;
 27c:	8f e0       	ldi	r24, 0x0F	; 15
 27e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <PP1>
		PP2 = 0;}
 282:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 286:	15 c0       	rjmp	.+42     	; 0x2b2 <__vector_21+0xa2>
	else if(counter <= 127){
 288:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <counter>
 28c:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <counter+0x1>
 290:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <counter+0x2>
 294:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <counter+0x3>
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	4e ef       	ldi	r20, 0xFE	; 254
 29e:	52 e4       	ldi	r21, 0x42	; 66
 2a0:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <__cmpsf2>
 2a4:	18 16       	cp	r1, r24
 2a6:	2c f0       	brlt	.+10     	; 0x2b2 <__vector_21+0xa2>
		PP1 = 0;
 2a8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <PP1>
		PP2 = 15;}
 2ac:	8f e0       	ldi	r24, 0x0F	; 15
 2ae:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	
}
 2b2:	ff 91       	pop	r31
 2b4:	ef 91       	pop	r30
 2b6:	bf 91       	pop	r27
 2b8:	af 91       	pop	r26
 2ba:	9f 91       	pop	r25
 2bc:	8f 91       	pop	r24
 2be:	7f 91       	pop	r23
 2c0:	6f 91       	pop	r22
 2c2:	5f 91       	pop	r21
 2c4:	4f 91       	pop	r20
 2c6:	3f 91       	pop	r19
 2c8:	2f 91       	pop	r18
 2ca:	0f 90       	pop	r0
 2cc:	0f be       	out	0x3f, r0	; 63
 2ce:	0f 90       	pop	r0
 2d0:	1f 90       	pop	r1
 2d2:	18 95       	reti

000002d4 <__cmpsf2>:
 2d4:	0e 94 ac 01 	call	0x358	; 0x358 <__fp_cmp>
 2d8:	08 f4       	brcc	.+2      	; 0x2dc <__cmpsf2+0x8>
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	08 95       	ret

000002de <__floatunsisf>:
 2de:	e8 94       	clt
 2e0:	09 c0       	rjmp	.+18     	; 0x2f4 <__floatsisf+0x12>

000002e2 <__floatsisf>:
 2e2:	97 fb       	bst	r25, 7
 2e4:	3e f4       	brtc	.+14     	; 0x2f4 <__floatsisf+0x12>
 2e6:	90 95       	com	r25
 2e8:	80 95       	com	r24
 2ea:	70 95       	com	r23
 2ec:	61 95       	neg	r22
 2ee:	7f 4f       	sbci	r23, 0xFF	; 255
 2f0:	8f 4f       	sbci	r24, 0xFF	; 255
 2f2:	9f 4f       	sbci	r25, 0xFF	; 255
 2f4:	99 23       	and	r25, r25
 2f6:	a9 f0       	breq	.+42     	; 0x322 <__floatsisf+0x40>
 2f8:	f9 2f       	mov	r31, r25
 2fa:	96 e9       	ldi	r25, 0x96	; 150
 2fc:	bb 27       	eor	r27, r27
 2fe:	93 95       	inc	r25
 300:	f6 95       	lsr	r31
 302:	87 95       	ror	r24
 304:	77 95       	ror	r23
 306:	67 95       	ror	r22
 308:	b7 95       	ror	r27
 30a:	f1 11       	cpse	r31, r1
 30c:	f8 cf       	rjmp	.-16     	; 0x2fe <__floatsisf+0x1c>
 30e:	fa f4       	brpl	.+62     	; 0x34e <__floatsisf+0x6c>
 310:	bb 0f       	add	r27, r27
 312:	11 f4       	brne	.+4      	; 0x318 <__floatsisf+0x36>
 314:	60 ff       	sbrs	r22, 0
 316:	1b c0       	rjmp	.+54     	; 0x34e <__floatsisf+0x6c>
 318:	6f 5f       	subi	r22, 0xFF	; 255
 31a:	7f 4f       	sbci	r23, 0xFF	; 255
 31c:	8f 4f       	sbci	r24, 0xFF	; 255
 31e:	9f 4f       	sbci	r25, 0xFF	; 255
 320:	16 c0       	rjmp	.+44     	; 0x34e <__floatsisf+0x6c>
 322:	88 23       	and	r24, r24
 324:	11 f0       	breq	.+4      	; 0x32a <__floatsisf+0x48>
 326:	96 e9       	ldi	r25, 0x96	; 150
 328:	11 c0       	rjmp	.+34     	; 0x34c <__floatsisf+0x6a>
 32a:	77 23       	and	r23, r23
 32c:	21 f0       	breq	.+8      	; 0x336 <__floatsisf+0x54>
 32e:	9e e8       	ldi	r25, 0x8E	; 142
 330:	87 2f       	mov	r24, r23
 332:	76 2f       	mov	r23, r22
 334:	05 c0       	rjmp	.+10     	; 0x340 <__floatsisf+0x5e>
 336:	66 23       	and	r22, r22
 338:	71 f0       	breq	.+28     	; 0x356 <__floatsisf+0x74>
 33a:	96 e8       	ldi	r25, 0x86	; 134
 33c:	86 2f       	mov	r24, r22
 33e:	70 e0       	ldi	r23, 0x00	; 0
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	2a f0       	brmi	.+10     	; 0x34e <__floatsisf+0x6c>
 344:	9a 95       	dec	r25
 346:	66 0f       	add	r22, r22
 348:	77 1f       	adc	r23, r23
 34a:	88 1f       	adc	r24, r24
 34c:	da f7       	brpl	.-10     	; 0x344 <__floatsisf+0x62>
 34e:	88 0f       	add	r24, r24
 350:	96 95       	lsr	r25
 352:	87 95       	ror	r24
 354:	97 f9       	bld	r25, 7
 356:	08 95       	ret

00000358 <__fp_cmp>:
 358:	99 0f       	add	r25, r25
 35a:	00 08       	sbc	r0, r0
 35c:	55 0f       	add	r21, r21
 35e:	aa 0b       	sbc	r26, r26
 360:	e0 e8       	ldi	r30, 0x80	; 128
 362:	fe ef       	ldi	r31, 0xFE	; 254
 364:	16 16       	cp	r1, r22
 366:	17 06       	cpc	r1, r23
 368:	e8 07       	cpc	r30, r24
 36a:	f9 07       	cpc	r31, r25
 36c:	c0 f0       	brcs	.+48     	; 0x39e <__fp_cmp+0x46>
 36e:	12 16       	cp	r1, r18
 370:	13 06       	cpc	r1, r19
 372:	e4 07       	cpc	r30, r20
 374:	f5 07       	cpc	r31, r21
 376:	98 f0       	brcs	.+38     	; 0x39e <__fp_cmp+0x46>
 378:	62 1b       	sub	r22, r18
 37a:	73 0b       	sbc	r23, r19
 37c:	84 0b       	sbc	r24, r20
 37e:	95 0b       	sbc	r25, r21
 380:	39 f4       	brne	.+14     	; 0x390 <__fp_cmp+0x38>
 382:	0a 26       	eor	r0, r26
 384:	61 f0       	breq	.+24     	; 0x39e <__fp_cmp+0x46>
 386:	23 2b       	or	r18, r19
 388:	24 2b       	or	r18, r20
 38a:	25 2b       	or	r18, r21
 38c:	21 f4       	brne	.+8      	; 0x396 <__fp_cmp+0x3e>
 38e:	08 95       	ret
 390:	0a 26       	eor	r0, r26
 392:	09 f4       	brne	.+2      	; 0x396 <__fp_cmp+0x3e>
 394:	a1 40       	sbci	r26, 0x01	; 1
 396:	a6 95       	lsr	r26
 398:	8f ef       	ldi	r24, 0xFF	; 255
 39a:	81 1d       	adc	r24, r1
 39c:	81 1d       	adc	r24, r1
 39e:	08 95       	ret

000003a0 <__gesf2>:
 3a0:	0e 94 ac 01 	call	0x358	; 0x358 <__fp_cmp>
 3a4:	08 f4       	brcc	.+2      	; 0x3a8 <__gesf2+0x8>
 3a6:	8f ef       	ldi	r24, 0xFF	; 255
 3a8:	08 95       	ret

000003aa <__mulsf3>:
 3aa:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <__mulsf3x>
 3ae:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__fp_round>
 3b2:	0e 94 4b 02 	call	0x496	; 0x496 <__fp_pscA>
 3b6:	38 f0       	brcs	.+14     	; 0x3c6 <__mulsf3+0x1c>
 3b8:	0e 94 52 02 	call	0x4a4	; 0x4a4 <__fp_pscB>
 3bc:	20 f0       	brcs	.+8      	; 0x3c6 <__mulsf3+0x1c>
 3be:	95 23       	and	r25, r21
 3c0:	11 f0       	breq	.+4      	; 0x3c6 <__mulsf3+0x1c>
 3c2:	0c 94 42 02 	jmp	0x484	; 0x484 <__fp_inf>
 3c6:	0c 94 48 02 	jmp	0x490	; 0x490 <__fp_nan>
 3ca:	11 24       	eor	r1, r1
 3cc:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__fp_szero>

000003d0 <__mulsf3x>:
 3d0:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__fp_split3>
 3d4:	70 f3       	brcs	.-36     	; 0x3b2 <__mulsf3+0x8>

000003d6 <__mulsf3_pse>:
 3d6:	95 9f       	mul	r25, r21
 3d8:	c1 f3       	breq	.-16     	; 0x3ca <__mulsf3+0x20>
 3da:	95 0f       	add	r25, r21
 3dc:	50 e0       	ldi	r21, 0x00	; 0
 3de:	55 1f       	adc	r21, r21
 3e0:	62 9f       	mul	r22, r18
 3e2:	f0 01       	movw	r30, r0
 3e4:	72 9f       	mul	r23, r18
 3e6:	bb 27       	eor	r27, r27
 3e8:	f0 0d       	add	r31, r0
 3ea:	b1 1d       	adc	r27, r1
 3ec:	63 9f       	mul	r22, r19
 3ee:	aa 27       	eor	r26, r26
 3f0:	f0 0d       	add	r31, r0
 3f2:	b1 1d       	adc	r27, r1
 3f4:	aa 1f       	adc	r26, r26
 3f6:	64 9f       	mul	r22, r20
 3f8:	66 27       	eor	r22, r22
 3fa:	b0 0d       	add	r27, r0
 3fc:	a1 1d       	adc	r26, r1
 3fe:	66 1f       	adc	r22, r22
 400:	82 9f       	mul	r24, r18
 402:	22 27       	eor	r18, r18
 404:	b0 0d       	add	r27, r0
 406:	a1 1d       	adc	r26, r1
 408:	62 1f       	adc	r22, r18
 40a:	73 9f       	mul	r23, r19
 40c:	b0 0d       	add	r27, r0
 40e:	a1 1d       	adc	r26, r1
 410:	62 1f       	adc	r22, r18
 412:	83 9f       	mul	r24, r19
 414:	a0 0d       	add	r26, r0
 416:	61 1d       	adc	r22, r1
 418:	22 1f       	adc	r18, r18
 41a:	74 9f       	mul	r23, r20
 41c:	33 27       	eor	r19, r19
 41e:	a0 0d       	add	r26, r0
 420:	61 1d       	adc	r22, r1
 422:	23 1f       	adc	r18, r19
 424:	84 9f       	mul	r24, r20
 426:	60 0d       	add	r22, r0
 428:	21 1d       	adc	r18, r1
 42a:	82 2f       	mov	r24, r18
 42c:	76 2f       	mov	r23, r22
 42e:	6a 2f       	mov	r22, r26
 430:	11 24       	eor	r1, r1
 432:	9f 57       	subi	r25, 0x7F	; 127
 434:	50 40       	sbci	r21, 0x00	; 0
 436:	9a f0       	brmi	.+38     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 438:	f1 f0       	breq	.+60     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 43a:	88 23       	and	r24, r24
 43c:	4a f0       	brmi	.+18     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 43e:	ee 0f       	add	r30, r30
 440:	ff 1f       	adc	r31, r31
 442:	bb 1f       	adc	r27, r27
 444:	66 1f       	adc	r22, r22
 446:	77 1f       	adc	r23, r23
 448:	88 1f       	adc	r24, r24
 44a:	91 50       	subi	r25, 0x01	; 1
 44c:	50 40       	sbci	r21, 0x00	; 0
 44e:	a9 f7       	brne	.-22     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 450:	9e 3f       	cpi	r25, 0xFE	; 254
 452:	51 05       	cpc	r21, r1
 454:	80 f0       	brcs	.+32     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 456:	0c 94 42 02 	jmp	0x484	; 0x484 <__fp_inf>
 45a:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__fp_szero>
 45e:	5f 3f       	cpi	r21, 0xFF	; 255
 460:	e4 f3       	brlt	.-8      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 462:	98 3e       	cpi	r25, 0xE8	; 232
 464:	d4 f3       	brlt	.-12     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 466:	86 95       	lsr	r24
 468:	77 95       	ror	r23
 46a:	67 95       	ror	r22
 46c:	b7 95       	ror	r27
 46e:	f7 95       	ror	r31
 470:	e7 95       	ror	r30
 472:	9f 5f       	subi	r25, 0xFF	; 255
 474:	c1 f7       	brne	.-16     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 476:	fe 2b       	or	r31, r30
 478:	88 0f       	add	r24, r24
 47a:	91 1d       	adc	r25, r1
 47c:	96 95       	lsr	r25
 47e:	87 95       	ror	r24
 480:	97 f9       	bld	r25, 7
 482:	08 95       	ret

00000484 <__fp_inf>:
 484:	97 f9       	bld	r25, 7
 486:	9f 67       	ori	r25, 0x7F	; 127
 488:	80 e8       	ldi	r24, 0x80	; 128
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	60 e0       	ldi	r22, 0x00	; 0
 48e:	08 95       	ret

00000490 <__fp_nan>:
 490:	9f ef       	ldi	r25, 0xFF	; 255
 492:	80 ec       	ldi	r24, 0xC0	; 192
 494:	08 95       	ret

00000496 <__fp_pscA>:
 496:	00 24       	eor	r0, r0
 498:	0a 94       	dec	r0
 49a:	16 16       	cp	r1, r22
 49c:	17 06       	cpc	r1, r23
 49e:	18 06       	cpc	r1, r24
 4a0:	09 06       	cpc	r0, r25
 4a2:	08 95       	ret

000004a4 <__fp_pscB>:
 4a4:	00 24       	eor	r0, r0
 4a6:	0a 94       	dec	r0
 4a8:	12 16       	cp	r1, r18
 4aa:	13 06       	cpc	r1, r19
 4ac:	14 06       	cpc	r1, r20
 4ae:	05 06       	cpc	r0, r21
 4b0:	08 95       	ret

000004b2 <__fp_round>:
 4b2:	09 2e       	mov	r0, r25
 4b4:	03 94       	inc	r0
 4b6:	00 0c       	add	r0, r0
 4b8:	11 f4       	brne	.+4      	; 0x4be <__fp_round+0xc>
 4ba:	88 23       	and	r24, r24
 4bc:	52 f0       	brmi	.+20     	; 0x4d2 <__fp_round+0x20>
 4be:	bb 0f       	add	r27, r27
 4c0:	40 f4       	brcc	.+16     	; 0x4d2 <__fp_round+0x20>
 4c2:	bf 2b       	or	r27, r31
 4c4:	11 f4       	brne	.+4      	; 0x4ca <__fp_round+0x18>
 4c6:	60 ff       	sbrs	r22, 0
 4c8:	04 c0       	rjmp	.+8      	; 0x4d2 <__fp_round+0x20>
 4ca:	6f 5f       	subi	r22, 0xFF	; 255
 4cc:	7f 4f       	sbci	r23, 0xFF	; 255
 4ce:	8f 4f       	sbci	r24, 0xFF	; 255
 4d0:	9f 4f       	sbci	r25, 0xFF	; 255
 4d2:	08 95       	ret

000004d4 <__fp_split3>:
 4d4:	57 fd       	sbrc	r21, 7
 4d6:	90 58       	subi	r25, 0x80	; 128
 4d8:	44 0f       	add	r20, r20
 4da:	55 1f       	adc	r21, r21
 4dc:	59 f0       	breq	.+22     	; 0x4f4 <__fp_splitA+0x10>
 4de:	5f 3f       	cpi	r21, 0xFF	; 255
 4e0:	71 f0       	breq	.+28     	; 0x4fe <__fp_splitA+0x1a>
 4e2:	47 95       	ror	r20

000004e4 <__fp_splitA>:
 4e4:	88 0f       	add	r24, r24
 4e6:	97 fb       	bst	r25, 7
 4e8:	99 1f       	adc	r25, r25
 4ea:	61 f0       	breq	.+24     	; 0x504 <__fp_splitA+0x20>
 4ec:	9f 3f       	cpi	r25, 0xFF	; 255
 4ee:	79 f0       	breq	.+30     	; 0x50e <__fp_splitA+0x2a>
 4f0:	87 95       	ror	r24
 4f2:	08 95       	ret
 4f4:	12 16       	cp	r1, r18
 4f6:	13 06       	cpc	r1, r19
 4f8:	14 06       	cpc	r1, r20
 4fa:	55 1f       	adc	r21, r21
 4fc:	f2 cf       	rjmp	.-28     	; 0x4e2 <__fp_split3+0xe>
 4fe:	46 95       	lsr	r20
 500:	f1 df       	rcall	.-30     	; 0x4e4 <__fp_splitA>
 502:	08 c0       	rjmp	.+16     	; 0x514 <__fp_splitA+0x30>
 504:	16 16       	cp	r1, r22
 506:	17 06       	cpc	r1, r23
 508:	18 06       	cpc	r1, r24
 50a:	99 1f       	adc	r25, r25
 50c:	f1 cf       	rjmp	.-30     	; 0x4f0 <__fp_splitA+0xc>
 50e:	86 95       	lsr	r24
 510:	71 05       	cpc	r23, r1
 512:	61 05       	cpc	r22, r1
 514:	08 94       	sec
 516:	08 95       	ret

00000518 <__fp_zero>:
 518:	e8 94       	clt

0000051a <__fp_szero>:
 51a:	bb 27       	eor	r27, r27
 51c:	66 27       	eor	r22, r22
 51e:	77 27       	eor	r23, r23
 520:	cb 01       	movw	r24, r22
 522:	97 f9       	bld	r25, 7
 524:	08 95       	ret

00000526 <_exit>:
 526:	f8 94       	cli

00000528 <__stop_program>:
 528:	ff cf       	rjmp	.-2      	; 0x528 <__stop_program>
