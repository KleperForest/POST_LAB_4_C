
POST_LAB_4_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000022e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008db  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006fa  00000000  00000000  00000bab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000383  00000000  00000000  000012a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00001628  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ec  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ed  00000000  00000000  00001a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001c59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea eb       	ldi	r30, 0xBA	; 186
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 30       	cpi	r26, 0x01	; 1
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  9e:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
    }
}

void setup(void) {
    // Configurar pines PB0 a PB2 como salidas para los transistores
    DDRB |= 0b00000111;
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	87 60       	ori	r24, 0x07	; 7
  aa:	84 b9       	out	0x04, r24	; 4

    // Configurar PC3 y PC0 como entradas con pull-up habilitado para los botones
    DDRC &= ~((1 << DDC3) | (1 << DDC0)); // Configurar como entrada
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	86 7f       	andi	r24, 0xF6	; 246
  b0:	87 b9       	out	0x07, r24	; 7
    PORTC |= ((1 << PORTC3) | (1 << PORTC0)); // Habilitar resistencias de pull-up en PC3 y PC0
  b2:	88 b1       	in	r24, 0x08	; 8
  b4:	89 60       	ori	r24, 0x09	; 9
  b6:	88 b9       	out	0x08, r24	; 8

    // Configurar pines PD0 a PD7 como salidas para los LEDs
    DDRD |= 0b11111111;
  b8:	8a b1       	in	r24, 0x0a	; 10
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	8a b9       	out	0x0a, r24	; 10
  be:	08 95       	ret

000000c0 <main>:
void setup(void);
//Tabla
const uint8_t mylist[] = {0x7E, 0x28, 0x5D, 0x6D, 0x2B, 0x67, 0x77, 0x2C, 0x7F, 0x2F, 0x3F, 0x73, 0x56, 0x79, 0x57, 0x17};

int main(void) {
    cli(); // Deshabilitar Interrupciones
  c0:	f8 94       	cli

    // Habilitar interrupciones de pin change para los pines PC0 y PC3
	PCMSK1 |= ((1 << PCINT11) | (1 << PCINT8)); // Habilitar interrupciones para PCINT11 y PCINT8
  c2:	ec e6       	ldi	r30, 0x6C	; 108
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	89 60       	ori	r24, 0x09	; 9
  ca:	80 83       	st	Z, r24
    PCICR |= (1 << PCIE1); // PCINT1 8-14 Grupo 1
  cc:	e8 e6       	ldi	r30, 0x68	; 104
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	82 60       	ori	r24, 0x02	; 2
  d4:	80 83       	st	Z, r24

    setup(); // Configurar Puertos
  d6:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
    sei(); // Habilitar Interrupciones Globales
  da:	78 94       	sei

    while (1) {
        // Programa principal
		//Displays
		//D1
		PORTB |= (1 << PB1);// Encender transistor en PB1
  dc:	85 b1       	in	r24, 0x05	; 5
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	85 b9       	out	0x05, r24	; 5
		PORTD = 0b01010000;// Mostrar primier display
  e2:	80 e5       	ldi	r24, 0x50	; 80
  e4:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	89 ef       	ldi	r24, 0xF9	; 249
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <main+0x2a>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x30>
  f0:	00 00       	nop
		_delay_ms(1);
		PORTB &= ~(1 << PB1);// Apagar transistor en PB1
  f2:	85 b1       	in	r24, 0x05	; 5
  f4:	8d 7f       	andi	r24, 0xFD	; 253
  f6:	85 b9       	out	0x05, r24	; 5
  f8:	89 ef       	ldi	r24, 0xF9	; 249
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <main+0x3c>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x42>
 102:	00 00       	nop
		_delay_ms(1);
		//D2
		PORTB |= (1 << PB2);// Encender transistor en PB2
 104:	85 b1       	in	r24, 0x05	; 5
 106:	84 60       	ori	r24, 0x04	; 4
 108:	85 b9       	out	0x05, r24	; 5
		PORTD = 0b00100000;// Mostrar segundo display
 10a:	80 e2       	ldi	r24, 0x20	; 32
 10c:	8b b9       	out	0x0b, r24	; 11
 10e:	89 ef       	ldi	r24, 0xF9	; 249
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <main+0x52>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x58>
 118:	00 00       	nop
		_delay_ms(1);
		PORTB &= ~(1 << PB2);// Apagar transistor en PB2
 11a:	85 b1       	in	r24, 0x05	; 5
 11c:	8b 7f       	andi	r24, 0xFB	; 251
 11e:	85 b9       	out	0x05, r24	; 5
 120:	89 ef       	ldi	r24, 0xF9	; 249
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <main+0x64>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x6a>
 12a:	00 00       	nop
		
		// Actualizar el puerto D con el valor del contador
		//Nota para autor: El problema de los Leds se debia
		//a que ciertos led tenian la caracteristica que provocaban 
		//una conección a tierra ¨Artificial¨.
		PORTB |= (1 << PB0);// Encender transistor en PB0
 12c:	85 b1       	in	r24, 0x05	; 5
 12e:	81 60       	ori	r24, 0x01	; 1
 130:	85 b9       	out	0x05, r24	; 5
		PORTD = 0;// Limpiamos salida de leds
 132:	1b b8       	out	0x0b, r1	; 11
		PORTD = contador;// Mostrar valor de contador
 134:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 138:	8b b9       	out	0x0b, r24	; 11
 13a:	89 ef       	ldi	r24, 0xF9	; 249
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <main+0x7e>
 142:	00 c0       	rjmp	.+0      	; 0x144 <main+0x84>
 144:	00 00       	nop
		_delay_ms(1);
		PORTB &= ~(1 << PB0);// Apagar transistor en PB0
 146:	85 b1       	in	r24, 0x05	; 5
 148:	8e 7f       	andi	r24, 0xFE	; 254
 14a:	85 b9       	out	0x05, r24	; 5
 14c:	89 ef       	ldi	r24, 0xF9	; 249
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <main+0x90>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x96>
 156:	00 00       	nop
 158:	c1 cf       	rjmp	.-126    	; 0xdc <main+0x1c>

0000015a <__vector_4>:

    // Configurar pines PD0 a PD7 como salidas para los LEDs
    DDRD |= 0b11111111;
}

ISR(PCINT1_vect) {
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
 168:	83 ec       	ldi	r24, 0xC3	; 195
 16a:	99 e0       	ldi	r25, 0x09	; 9
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <__vector_4+0x12>
 170:	00 c0       	rjmp	.+0      	; 0x172 <__vector_4+0x18>
 172:	00 00       	nop
	_delay_ms(10);
    // Verificar si la interrupción fue causada por PCINT11 (PC3)
    if (PINC & (1 << PINC3)) {
 174:	33 9b       	sbis	0x06, 3	; 6
 176:	05 c0       	rjmp	.+10     	; 0x182 <__vector_4+0x28>
        contador++; // Incrementar contador si el botón en PC3 fue presionado
 178:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 17c:	8f 5f       	subi	r24, 0xFF	; 255
 17e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    }
    // Verificar si la interrupción fue causada por PCINT8 (PC0)
    if (PINC & (1 << PINC0)) {
 182:	30 9b       	sbis	0x06, 0	; 6
 184:	05 c0       	rjmp	.+10     	; 0x190 <__vector_4+0x36>
        contador--; // Decrementar contador si el botón en PC0 fue presionado
 186:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 18a:	81 50       	subi	r24, 0x01	; 1
 18c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	contador = (contador > 255) ? 0 : contador;// Si contador Overflow 255 se resetea el contador
 190:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 194:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 198:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	contador = (contador < 0) ? 255 : contador;// Si contador Underflow 0 se setea a 255
 19c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
