
POST_LAB_4_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000214  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008a8  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e1  00000000  00000000  00000b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000379  00000000  00000000  0000123d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  000015b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003dc  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ed  00000000  00000000  000019ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001bd9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 a0 00 	jmp	0x140	; 0x140 <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  88:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
    }
}

void setup(void) {
    // Configurar pines PB0 a PB2 como salidas para los transistores
    DDRB |= 0b00000111;
  90:	84 b1       	in	r24, 0x04	; 4
  92:	87 60       	ori	r24, 0x07	; 7
  94:	84 b9       	out	0x04, r24	; 4

    // Configurar PC3 y PC0 como entradas con pull-up habilitado para los botones
    DDRC &= ~((1 << DDC3) | (1 << DDC0)); // Configurar como entrada
  96:	87 b1       	in	r24, 0x07	; 7
  98:	86 7f       	andi	r24, 0xF6	; 246
  9a:	87 b9       	out	0x07, r24	; 7
    PORTC |= ((1 << PORTC3) | (1 << PORTC0)); // Habilitar resistencias de pull-up en PC3 y PC0
  9c:	88 b1       	in	r24, 0x08	; 8
  9e:	89 60       	ori	r24, 0x09	; 9
  a0:	88 b9       	out	0x08, r24	; 8

    // Configurar pines PD0 a PD7 como salidas para los LEDs
    DDRD |= 0b11111111;
  a2:	8a b1       	in	r24, 0x0a	; 10
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	8a b9       	out	0x0a, r24	; 10
  a8:	08 95       	ret

000000aa <main>:
volatile uint8_t contador = 0; // Declarar contador como volatile para uso en interrupción

void setup(void);

int main(void) {
    cli(); // Deshabilitar Interrupciones
  aa:	f8 94       	cli

    // Habilitar interrupciones de pin change para los pines PC0 y PC3
	PCMSK1 |= ((1 << PCINT11) | (1 << PCINT8)); // Habilitar interrupciones para PCINT11 y PCINT8
  ac:	ec e6       	ldi	r30, 0x6C	; 108
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	89 60       	ori	r24, 0x09	; 9
  b4:	80 83       	st	Z, r24
    PCICR |= (1 << PCIE1); // PCINT1 8-14 Grupo 1
  b6:	e8 e6       	ldi	r30, 0x68	; 104
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	80 83       	st	Z, r24

    setup(); // Configurar Puertos
  c0:	0e 94 48 00 	call	0x90	; 0x90 <setup>
    sei(); // Habilitar Interrupciones Globales
  c4:	78 94       	sei

    while (1) {
        // Programa principal
		//Displays
		//D1
		PORTB |= (1 << PB1);// Encender transistor en PB1
  c6:	85 b1       	in	r24, 0x05	; 5
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	85 b9       	out	0x05, r24	; 5
		PORTD = 0b00000001;// Mostrar primier display
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	e9 ef       	ldi	r30, 0xF9	; 249
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	31 97       	sbiw	r30, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <main+0x2a>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x30>
  da:	00 00       	nop
		_delay_ms(1);
		PORTB &= ~(1 << PB1);// Apagar transistor en PB1
  dc:	85 b1       	in	r24, 0x05	; 5
  de:	8d 7f       	andi	r24, 0xFD	; 253
  e0:	85 b9       	out	0x05, r24	; 5
  e2:	e9 ef       	ldi	r30, 0xF9	; 249
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	31 97       	sbiw	r30, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <main+0x3c>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x42>
  ec:	00 00       	nop
		_delay_ms(1);
		//D2
		PORTB |= (1 << PB2);// Encender transistor en PB2
  ee:	85 b1       	in	r24, 0x05	; 5
  f0:	84 60       	ori	r24, 0x04	; 4
  f2:	85 b9       	out	0x05, r24	; 5
		PORTD = 0b00000001;// Mostrar segundo display
  f4:	9b b9       	out	0x0b, r25	; 11
  f6:	89 ef       	ldi	r24, 0xF9	; 249
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <main+0x50>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x56>
 100:	00 00       	nop
		_delay_ms(1);
		PORTB &= ~(1 << PB2);// Apagar transistor en PB2
 102:	85 b1       	in	r24, 0x05	; 5
 104:	8b 7f       	andi	r24, 0xFB	; 251
 106:	85 b9       	out	0x05, r24	; 5
 108:	e9 ef       	ldi	r30, 0xF9	; 249
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	31 97       	sbiw	r30, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <main+0x62>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x68>
 112:	00 00       	nop
		_delay_ms(1);
		
		// Actualizar el puerto D con el valor del contador
		PORTB |= (1 << PB0);// Encender transistor en PB0
 114:	85 b1       	in	r24, 0x05	; 5
 116:	81 60       	ori	r24, 0x01	; 1
 118:	85 b9       	out	0x05, r24	; 5
		PORTD = contador;// Mostrar valor de contador
 11a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 11e:	8b b9       	out	0x0b, r24	; 11
 120:	89 ef       	ldi	r24, 0xF9	; 249
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <main+0x7a>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x80>
 12a:	00 00       	nop
		_delay_ms(1);
		PORTB &= ~(1 << PB0);// Apagar transistor en PB0
 12c:	85 b1       	in	r24, 0x05	; 5
 12e:	8e 7f       	andi	r24, 0xFE	; 254
 130:	85 b9       	out	0x05, r24	; 5
 132:	e9 ef       	ldi	r30, 0xF9	; 249
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	31 97       	sbiw	r30, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <main+0x8c>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0x92>
 13c:	00 00       	nop
 13e:	c3 cf       	rjmp	.-122    	; 0xc6 <main+0x1c>

00000140 <__vector_4>:

    // Configurar pines PD0 a PD7 como salidas para los LEDs
    DDRD |= 0b11111111;
}

ISR(PCINT1_vect) {
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	83 ec       	ldi	r24, 0xC3	; 195
 150:	99 e0       	ldi	r25, 0x09	; 9
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <__vector_4+0x12>
 156:	00 c0       	rjmp	.+0      	; 0x158 <__vector_4+0x18>
 158:	00 00       	nop
	_delay_ms(10);
    // Verificar si la interrupción fue causada por PCINT11 (PC3)
    if (PINC & (1 << PINC3)) {
 15a:	33 9b       	sbis	0x06, 3	; 6
 15c:	05 c0       	rjmp	.+10     	; 0x168 <__vector_4+0x28>
        contador++; // Incrementar contador si el botón en PC3 fue presionado
 15e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 162:	8f 5f       	subi	r24, 0xFF	; 255
 164:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
    }
    // Verificar si la interrupción fue causada por PCINT8 (PC0)
    if (PINC & (1 << PINC0)) {
 168:	30 9b       	sbis	0x06, 0	; 6
 16a:	05 c0       	rjmp	.+10     	; 0x176 <__vector_4+0x36>
        contador--; // Decrementar contador si el botón en PC0 fue presionado
 16c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 170:	81 50       	subi	r24, 0x01	; 1
 172:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
	contador = (contador > 255) ? 0 : contador;// Si contador Overflow 255 se resetea el contador
 176:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 17a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 17e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	contador = (contador < 0) ? 255 : contador;// Si contador Underflow 0 se setea a 255
 182:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 186:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 18a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 18e:	9f 91       	pop	r25
 190:	8f 91       	pop	r24
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
